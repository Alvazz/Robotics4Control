
CentralController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001746  000017da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080012c  0080012c  00001806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006ee6  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019ab  00000000  00000000  00008ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000030a3  00000000  00000000  0000a48f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cf4  00000000  00000000  0000d534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002774  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004e97  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f48  00000000  00000000  00015833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_11>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      74:	45 08       	sbc	r4, r5
      76:	6e 08       	sbc	r6, r14
      78:	9d 09       	sbc	r25, r13
      7a:	6e 08       	sbc	r6, r14
      7c:	9d 09       	sbc	r25, r13
      7e:	ae 08       	sbc	r10, r14
      80:	d2 08       	sbc	r13, r2
      82:	9d 09       	sbc	r25, r13
      84:	3e 09       	sbc	r19, r14
      86:	50 09       	sbc	r21, r0

00000088 <ProductString>:
      88:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      98:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      a8:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000b8 <ManufacturerString>:
      b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
      d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
      d6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      e6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      f6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     106:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000114 <DeviceDescriptor>:
     114:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     124:	dc 01                                               ..

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d2 e0       	ldi	r29, 0x02	; 2
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	e6 e4       	ldi	r30, 0x46	; 70
     13a:	f7 e1       	ldi	r31, 0x17	; 23
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
     13e:	05 90       	lpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	ac 32       	cpi	r26, 0x2C	; 44
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	ac e2       	ldi	r26, 0x2C	; 44
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	a9 34       	cpi	r26, 0x49	; 73
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
     15c:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     164:	84 b7       	in	r24, 0x34	; 52
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     16a:	88 e1       	ldi	r24, 0x18	; 24
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	80 93 60 00 	sts	0x0060, r24
     174:	10 92 60 00 	sts	0x0060, r1
     178:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	80 e8       	ldi	r24, 0x80	; 128
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	80 93 61 00 	sts	0x0061, r24
     186:	90 93 61 00 	sts	0x0061, r25
     18a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     18c:	84 b1       	in	r24, 0x04	; 4
     18e:	80 6c       	ori	r24, 0xC0	; 192
     190:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     192:	85 b1       	in	r24, 0x05	; 5
     194:	8f 73       	andi	r24, 0x3F	; 63
     196:	85 b9       	out	0x05, r24	; 5
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	LEDs_Init();	
	USB_Init();
     198:	0e 94 3d 07 	call	0xe7a	; 0xe7a <USB_Init>
     19c:	08 95       	ret

0000019e <EVENT_USB_Device_Connect>:
				PORTB &= ~(LEDMask & LEDS_ALL_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = (PORTB & ~LEDS_ALL_LEDS) | (LEDMask & LEDS_ALL_LEDS);
     19e:	85 b1       	in	r24, 0x05	; 5
     1a0:	8f 73       	andi	r24, 0x3F	; 63
     1a2:	80 68       	ori	r24, 0x80	; 128
     1a4:	85 b9       	out	0x05, r24	; 5
     1a6:	08 95       	ret

000001a8 <EVENT_USB_Device_Disconnect>:
     1a8:	85 b1       	in	r24, 0x05	; 5
     1aa:	8f 73       	andi	r24, 0x3F	; 63
     1ac:	80 64       	ori	r24, 0x40	; 64
     1ae:	85 b9       	out	0x05, r24	; 5
     1b0:	08 95       	ret

000001b2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1ba:	88 23       	and	r24, r24
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <EVENT_USB_Device_ConfigurationChanged+0x10>
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <EVENT_USB_Device_ConfigurationChanged+0x12>
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	85 b1       	in	r24, 0x05	; 5
     1c6:	8f 73       	andi	r24, 0x3F	; 63
     1c8:	89 2b       	or	r24, r25
     1ca:	85 b9       	out	0x05, r24	; 5
     1cc:	08 95       	ret

000001ce <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0e 94 1c 03 	call	0x638	; 0x638 <CDC_Device_ProcessControlRequest>
     1d6:	08 95       	ret

000001d8 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     1d8:	08 95       	ret

000001da <processAndSendtoWireless>:
			break;
	}

}

void processAndSendtoWireless(){
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	2b 97       	sbiw	r28, 0x0b	; 11
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1ee:	ef e2       	ldi	r30, 0x2F	; 47
     1f0:	f1 e0       	ldi	r31, 0x01	; 1

			uint8_t Data = *Buffer->Out;
     1f2:	a2 81       	ldd	r26, Z+2	; 0x02
     1f4:	b3 81       	ldd	r27, Z+3	; 0x03
     1f6:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     1f8:	b3 83       	std	Z+3, r27	; 0x03
     1fa:	a2 83       	std	Z+2, r26	; 0x02
     1fc:	86 81       	ldd	r24, Z+6	; 0x06
     1fe:	97 81       	ldd	r25, Z+7	; 0x07
     200:	a8 17       	cp	r26, r24
     202:	b9 07       	cpc	r27, r25
     204:	21 f4       	brne	.+8      	; 0x20e <processAndSendtoWireless+0x34>
			  Buffer->Out = Buffer->Start;
     206:	84 81       	ldd	r24, Z+4	; 0x04
     208:	95 81       	ldd	r25, Z+5	; 0x05
     20a:	93 83       	std	Z+3, r25	; 0x03
     20c:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     20e:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     210:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     212:	82 85       	ldd	r24, Z+10	; 0x0a
     214:	93 85       	ldd	r25, Z+11	; 0x0b
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	93 87       	std	Z+11, r25	; 0x0b
     21a:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     21c:	3f bf       	out	0x3f, r19	; 63
	   


	uint8_t Byte=RingBuffer_Remove(&USBtoWireless_Buffer); //Process the first byte: COMMAND_BYTE-ROBOT_ID-DATA
	uint8_t addBroadcast[NRF24L01_ADDRSIZE]=ADD_TX_GEN;
     21e:	85 e0       	ldi	r24, 0x05	; 5
     220:	e6 e2       	ldi	r30, 0x26	; 38
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	de 01       	movw	r26, r28
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <processAndSendtoWireless+0x4e>
	uint8_t add[NRF24L01_ADDRSIZE]=ADD_TX_GEN;
     230:	85 e0       	ldi	r24, 0x05	; 5
     232:	e6 e2       	ldi	r30, 0x26	; 38
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	de 01       	movw	r26, r28
     238:	16 96       	adiw	r26, 0x06	; 6
     23a:	01 90       	ld	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	8a 95       	dec	r24
     240:	e1 f7       	brne	.-8      	; 0x23a <processAndSendtoWireless+0x60>
	uint8_t bufferout[NRF24L01_PAYLOAD];
  
	if(Byte==MESSAGE_GPS){
     242:	27 34       	cpi	r18, 0x47	; 71
     244:	09 f0       	breq	.+2      	; 0x248 <processAndSendtoWireless+0x6e>
     246:	3d c0       	rjmp	.+122    	; 0x2c2 <processAndSendtoWireless+0xe8>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     248:	ef e2       	ldi	r30, 0x2F	; 47
     24a:	f1 e0       	ldi	r31, 0x01	; 1

			uint8_t Data = *Buffer->Out;
     24c:	a2 81       	ldd	r26, Z+2	; 0x02
     24e:	b3 81       	ldd	r27, Z+3	; 0x03
     250:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     252:	b3 83       	std	Z+3, r27	; 0x03
     254:	a2 83       	std	Z+2, r26	; 0x02
     256:	86 81       	ldd	r24, Z+6	; 0x06
     258:	97 81       	ldd	r25, Z+7	; 0x07
     25a:	a8 17       	cp	r26, r24
     25c:	b9 07       	cpc	r27, r25
     25e:	21 f4       	brne	.+8      	; 0x268 <processAndSendtoWireless+0x8e>
			  Buffer->Out = Buffer->Start;
     260:	84 81       	ldd	r24, Z+4	; 0x04
     262:	95 81       	ldd	r25, Z+5	; 0x05
     264:	93 83       	std	Z+3, r25	; 0x03
     266:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     268:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     26a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     26c:	82 85       	ldd	r24, Z+10	; 0x0a
     26e:	93 85       	ldd	r25, Z+11	; 0x0b
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	93 87       	std	Z+11, r25	; 0x0b
     274:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     276:	3f bf       	out	0x3f, r19	; 63
		Byte=RingBuffer_Remove(&USBtoWireless_Buffer); //Robot ID
		
		add[NRF24L01_ADDRSIZE-1]=NODE_GPS+Byte;  
     278:	80 eb       	ldi	r24, 0xB0	; 176
     27a:	82 0f       	add	r24, r18
     27c:	8a 87       	std	Y+10, r24	; 0x0a
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     27e:	ef e2       	ldi	r30, 0x2F	; 47
     280:	f1 e0       	ldi	r31, 0x01	; 1

			uint8_t Data = *Buffer->Out;
     282:	a2 81       	ldd	r26, Z+2	; 0x02
     284:	b3 81       	ldd	r27, Z+3	; 0x03
     286:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     288:	b3 83       	std	Z+3, r27	; 0x03
     28a:	a2 83       	std	Z+2, r26	; 0x02
     28c:	86 81       	ldd	r24, Z+6	; 0x06
     28e:	97 81       	ldd	r25, Z+7	; 0x07
     290:	a8 17       	cp	r26, r24
     292:	b9 07       	cpc	r27, r25
     294:	21 f4       	brne	.+8      	; 0x29e <processAndSendtoWireless+0xc4>
			  Buffer->Out = Buffer->Start;
     296:	84 81       	ldd	r24, Z+4	; 0x04
     298:	95 81       	ldd	r25, Z+5	; 0x05
     29a:	93 83       	std	Z+3, r25	; 0x03
     29c:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     29e:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2a0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2a2:	82 85       	ldd	r24, Z+10	; 0x0a
     2a4:	93 85       	ldd	r25, Z+11	; 0x0b
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	93 87       	std	Z+11, r25	; 0x0b
     2aa:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2ac:	3f bf       	out	0x3f, r19	; 63
				
		//SET TX
		for (uint8_t i=0;i<NRF24L01_PAYLOAD;i++){
		 Byte=RingBuffer_Remove(&USBtoWireless_Buffer);
		// CDC_Device_SendByte(&VirtualSerial_CDC_Interface,Byte);		
		 bufferout[i]=Byte;
     2ae:	2b 87       	std	Y+11, r18	; 0x0b
		}		
		
		nrf24l01_settxaddr(add);
     2b0:	ce 01       	movw	r24, r28
     2b2:	06 96       	adiw	r24, 0x06	; 6
     2b4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <nrf24l01_settxaddr>
		nrf24l01_write(bufferout);
     2b8:	ce 01       	movw	r24, r28
     2ba:	0b 96       	adiw	r24, 0x0b	; 11
     2bc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <nrf24l01_write>
     2c0:	73 c0       	rjmp	.+230    	; 0x3a8 <__stack+0xa9>
		
	}
	else if(Byte==MESSAGE_START){	
     2c2:	23 35       	cpi	r18, 0x53	; 83
     2c4:	d9 f4       	brne	.+54     	; 0x2fc <processAndSendtoWireless+0x122>
     2c6:	54 c0       	rjmp	.+168    	; 0x370 <__stack+0x71>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2c8:	fa 01       	movw	r30, r20

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	93 81       	ldd	r25, Z+3	; 0x03
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	93 83       	std	Z+3, r25	; 0x03
     2d2:	82 83       	std	Z+2, r24	; 0x02
     2d4:	26 81       	ldd	r18, Z+6	; 0x06
     2d6:	37 81       	ldd	r19, Z+7	; 0x07
     2d8:	82 17       	cp	r24, r18
     2da:	93 07       	cpc	r25, r19
     2dc:	21 f4       	brne	.+8      	; 0x2e6 <processAndSendtoWireless+0x10c>
			  Buffer->Out = Buffer->Start;
     2de:	84 81       	ldd	r24, Z+4	; 0x04
     2e0:	95 81       	ldd	r25, Z+5	; 0x05
     2e2:	93 83       	std	Z+3, r25	; 0x03
     2e4:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2e6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2e8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2ea:	82 85       	ldd	r24, Z+10	; 0x0a
     2ec:	93 85       	ldd	r25, Z+11	; 0x0b
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	93 87       	std	Z+11, r25	; 0x0b
     2f2:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2f4:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     2f6:	61 50       	subi	r22, 0x01	; 1
		for (uint8_t i=0;i<NRF24L01_PAYLOAD;i++){				
			bufferout[i]=CMD_START; //DummyByte
		}	
		nrf24l01_settxaddr(addBroadcast);
		nrf24l01_write(bufferout);		
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
     2f8:	39 f7       	brne	.-50     	; 0x2c8 <processAndSendtoWireless+0xee>
     2fa:	56 c0       	rjmp	.+172    	; 0x3a8 <__stack+0xa9>
		Byte=RingBuffer_Remove(&USBtoWireless_Buffer);	
	}
	else if(Byte==MESSAGE_STOP){
     2fc:	24 35       	cpi	r18, 0x54	; 84
     2fe:	d9 f4       	brne	.+54     	; 0x336 <__stack+0x37>
     300:	45 c0       	rjmp	.+138    	; 0x38c <__stack+0x8d>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     302:	fa 01       	movw	r30, r20

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     304:	82 81       	ldd	r24, Z+2	; 0x02
     306:	93 81       	ldd	r25, Z+3	; 0x03
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	93 83       	std	Z+3, r25	; 0x03
     30c:	82 83       	std	Z+2, r24	; 0x02
     30e:	26 81       	ldd	r18, Z+6	; 0x06
     310:	37 81       	ldd	r19, Z+7	; 0x07
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	21 f4       	brne	.+8      	; 0x320 <__stack+0x21>
			  Buffer->Out = Buffer->Start;
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	95 81       	ldd	r25, Z+5	; 0x05
     31c:	93 83       	std	Z+3, r25	; 0x03
     31e:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     320:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     322:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     324:	82 85       	ldd	r24, Z+10	; 0x0a
     326:	93 85       	ldd	r25, Z+11	; 0x0b
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	93 87       	std	Z+11, r25	; 0x0b
     32c:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     32e:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     330:	61 50       	subi	r22, 0x01	; 1
		for (uint8_t i=0;i<NRF24L01_PAYLOAD;i++){
			bufferout[i]=CMD_STOP; //DummyByte
		}
		nrf24l01_settxaddr(addBroadcast);
		nrf24l01_write(bufferout);
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
     332:	39 f7       	brne	.-50     	; 0x302 <__stack+0x3>
     334:	39 c0       	rjmp	.+114    	; 0x3a8 <__stack+0xa9>
		nrf24l01_settxaddr(addBroadcast);
		nrf24l01_write(bufferout);		
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
		Byte=RingBuffer_Remove(&USBtoWireless_Buffer);	
	}
	else if(Byte==MESSAGE_STOP){
     336:	62 e0       	ldi	r22, 0x02	; 2
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     338:	4f e2       	ldi	r20, 0x2F	; 47
     33a:	51 e0       	ldi	r21, 0x01	; 1
     33c:	fa 01       	movw	r30, r20

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     33e:	82 81       	ldd	r24, Z+2	; 0x02
     340:	93 81       	ldd	r25, Z+3	; 0x03
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	93 83       	std	Z+3, r25	; 0x03
     346:	82 83       	std	Z+2, r24	; 0x02
     348:	26 81       	ldd	r18, Z+6	; 0x06
     34a:	37 81       	ldd	r19, Z+7	; 0x07
     34c:	82 17       	cp	r24, r18
     34e:	93 07       	cpc	r25, r19
     350:	21 f4       	brne	.+8      	; 0x35a <__stack+0x5b>
			  Buffer->Out = Buffer->Start;
     352:	84 81       	ldd	r24, Z+4	; 0x04
     354:	95 81       	ldd	r25, Z+5	; 0x05
     356:	93 83       	std	Z+3, r25	; 0x03
     358:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     35a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     35c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     35e:	82 85       	ldd	r24, Z+10	; 0x0a
     360:	93 85       	ldd	r25, Z+11	; 0x0b
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	93 87       	std	Z+11, r25	; 0x0b
     366:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     368:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     36a:	61 50       	subi	r22, 0x01	; 1
		nrf24l01_write(bufferout);
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
		Byte=RingBuffer_Remove(&USBtoWireless_Buffer);
	}
	else{
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
     36c:	39 f7       	brne	.-50     	; 0x33c <__stack+0x3d>
     36e:	1c c0       	rjmp	.+56     	; 0x3a8 <__stack+0xa9>
		nrf24l01_write(bufferout);
		
	}
	else if(Byte==MESSAGE_START){	
		for (uint8_t i=0;i<NRF24L01_PAYLOAD;i++){				
			bufferout[i]=CMD_START; //DummyByte
     370:	8b ea       	ldi	r24, 0xAB	; 171
     372:	8b 87       	std	Y+11, r24	; 0x0b
		}	
		nrf24l01_settxaddr(addBroadcast);
     374:	ce 01       	movw	r24, r28
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	0e 94 4c 0a 	call	0x1498	; 0x1498 <nrf24l01_settxaddr>
		nrf24l01_write(bufferout);		
     37c:	ce 01       	movw	r24, r28
     37e:	0b 96       	adiw	r24, 0x0b	; 11
     380:	0e 94 cb 0a 	call	0x1596	; 0x1596 <nrf24l01_write>
     384:	62 e0       	ldi	r22, 0x02	; 2
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     386:	4f e2       	ldi	r20, 0x2F	; 47
     388:	51 e0       	ldi	r21, 0x01	; 1
     38a:	9e cf       	rjmp	.-196    	; 0x2c8 <processAndSendtoWireless+0xee>
		for (uint8_t i=1;i<sizeof(USBtoWireless_Buffer_Data);i++)  //Flush Buffer by Default
		Byte=RingBuffer_Remove(&USBtoWireless_Buffer);	
	}
	else if(Byte==MESSAGE_STOP){
		for (uint8_t i=0;i<NRF24L01_PAYLOAD;i++){
			bufferout[i]=CMD_STOP; //DummyByte
     38c:	8a eb       	ldi	r24, 0xBA	; 186
     38e:	8b 87       	std	Y+11, r24	; 0x0b
		}
		nrf24l01_settxaddr(addBroadcast);
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 4c 0a 	call	0x1498	; 0x1498 <nrf24l01_settxaddr>
		nrf24l01_write(bufferout);
     398:	ce 01       	movw	r24, r28
     39a:	0b 96       	adiw	r24, 0x0b	; 11
     39c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <nrf24l01_write>
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	4f e2       	ldi	r20, 0x2F	; 47
     3a4:	51 e0       	ldi	r21, 0x01	; 1
     3a6:	ad cf       	rjmp	.-166    	; 0x302 <__stack+0x3>
		


		

}
     3a8:	2b 96       	adiw	r28, 0x0b	; 11
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     3ba:	0e 94 b2 00 	call	0x164	; 0x164 <SetupHardware>
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3be:	ef e2       	ldi	r30, 0x2F	; 47
     3c0:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3c2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3c4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     3c6:	8c e2       	ldi	r24, 0x2C	; 44
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     3ce:	93 83       	std	Z+3, r25	; 0x03
     3d0:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     3d2:	95 83       	std	Z+5, r25	; 0x05
     3d4:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     3d6:	8f e2       	ldi	r24, 0x2F	; 47
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	97 83       	std	Z+7, r25	; 0x07
     3dc:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	91 87       	std	Z+9, r25	; 0x09
     3e4:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     3e6:	13 86       	std	Z+11, r1	; 0x0b
     3e8:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3ea:	2f bf       	out	0x3f, r18	; 63
     3ec:	85 b1       	in	r24, 0x05	; 5
     3ee:	8f 73       	andi	r24, 0x3F	; 63
     3f0:	80 64       	ori	r24, 0x40	; 64
     3f2:	85 b9       	out	0x05, r24	; 5
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3f4:	78 94       	sei


	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
    
	nrf24l01_init();
     3f6:	0e 94 18 0b 	call	0x1630	; 0x1630 <nrf24l01_init>
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     3fa:	09 e3       	ldi	r16, 0x39	; 57
     3fc:	11 e0       	ldi	r17, 0x01	; 1
		 *  \return Boolean \c true if the buffer contains no free space, \c false otherwise.
		 */
		static inline bool RingBuffer_IsFull(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline bool RingBuffer_IsFull(RingBuffer_t* const Buffer)
		{
			return (RingBuffer_GetCount(Buffer) == Buffer->Size);
     3fe:	c7 e3       	ldi	r28, 0x37	; 55
     400:	d1 e0       	ldi	r29, 0x01	; 1
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     402:	0f 2e       	mov	r0, r31
     404:	ff e2       	ldi	r31, 0x2F	; 47
     406:	ef 2e       	mov	r14, r31
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	ff 2e       	mov	r15, r31
     40c:	f0 2d       	mov	r31, r0
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     40e:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     410:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     412:	f8 01       	movw	r30, r16
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     418:	8f bf       	out	0x3f, r24	; 63

	while(1){	
						 
		// Only try to read in bytes from the CDC interface if the transmit buffer is not full 
		
		if (!(RingBuffer_IsFull(&USBtoWireless_Buffer))){
     41a:	88 81       	ld	r24, Y
     41c:	99 81       	ldd	r25, Y+1	; 0x01
     41e:	28 17       	cp	r18, r24
     420:	39 07       	cpc	r19, r25
     422:	09 f1       	breq	.+66     	; 0x466 <main+0xac>
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CDC_Device_ReceiveByte>
			
			//Store received byte into the USART transmit buffer
			if (!(ReceivedByte < 0))
     42c:	99 23       	and	r25, r25
     42e:	ec f0       	brlt	.+58     	; 0x46a <main+0xb0>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     430:	f7 01       	movw	r30, r14

			*Buffer->In = Data;
     432:	a0 81       	ld	r26, Z
     434:	b1 81       	ldd	r27, Z+1	; 0x01
			   RingBuffer_Insert(&USBtoWireless_Buffer, ReceivedByte);			 
     436:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
     442:	26 81       	ldd	r18, Z+6	; 0x06
     444:	37 81       	ldd	r19, Z+7	; 0x07
     446:	82 17       	cp	r24, r18
     448:	93 07       	cpc	r25, r19
     44a:	21 f4       	brne	.+8      	; 0x454 <main+0x9a>
			  Buffer->In = Buffer->Start;
     44c:	84 81       	ldd	r24, Z+4	; 0x04
     44e:	95 81       	ldd	r25, Z+5	; 0x05
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     454:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     456:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     458:	82 85       	ldd	r24, Z+10	; 0x0a
     45a:	93 85       	ldd	r25, Z+11	; 0x0b
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	93 87       	std	Z+11, r25	; 0x0b
     460:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     462:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     464:	02 c0       	rjmp	.+4      	; 0x46a <main+0xb0>
		}
		else
			processAndSendtoWireless();
     466:	0e 94 ed 00 	call	0x1da	; 0x1da <processAndSendtoWireless>
		if(nrf24l01_readready()){
            nrf24l01_read(bufferin);
			CDC_Device_SendByte(&VirtualSerial_CDC_Interface,bufferin[0]);	
		}*/
			
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 cd 02 	call	0x59a	; 0x59a <CDC_Device_USBTask>
		USB_USBTask();
     472:	0e 94 c3 09 	call	0x1386	; 0x1386 <USB_USBTask>
		   
	}
     476:	cb cf       	rjmp	.-106    	; 0x40e <main+0x54>

00000478 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     478:	29 2f       	mov	r18, r25
     47a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     47c:	22 30       	cpi	r18, 0x02	; 2
     47e:	31 05       	cpc	r19, r1
     480:	59 f0       	breq	.+22     	; 0x498 <CALLBACK_USB_GetDescriptor+0x20>
     482:	23 30       	cpi	r18, 0x03	; 3
     484:	31 05       	cpc	r19, r1
     486:	69 f0       	breq	.+26     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x2a>
     488:	21 30       	cpi	r18, 0x01	; 1
     48a:	31 05       	cpc	r19, r1
     48c:	29 f1       	breq	.+74     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x60>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	29 c0       	rjmp	.+82     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     498:	8e e3       	ldi	r24, 0x3E	; 62
     49a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     49c:	26 ed       	ldi	r18, 0xD6	; 214
     49e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4a0:	24 c0       	rjmp	.+72     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>
     4a2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	91 05       	cpc	r25, r1
     4a8:	59 f0       	breq	.+22     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x48>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	91 05       	cpc	r25, r1
     4ae:	71 f0       	breq	.+28     	; 0x4cc <CALLBACK_USB_GetDescriptor+0x54>
     4b0:	89 2b       	or	r24, r25
     4b2:	b9 f4       	brne	.+46     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4b4:	e2 ed       	ldi	r30, 0xD2	; 210
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	84 91       	lpm	r24, Z
     4ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     4bc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     4be:	15 c0       	rjmp	.+42     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4c0:	e8 eb       	ldi	r30, 0xB8	; 184
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	84 91       	lpm	r24, Z
     4c6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     4c8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     4ca:	0f c0       	rjmp	.+30     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4cc:	e8 e8       	ldi	r30, 0x88	; 136
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	84 91       	lpm	r24, Z
     4d2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     4d4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     4d6:	09 c0       	rjmp	.+18     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4d8:	82 e1       	ldi	r24, 0x12	; 18
     4da:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4dc:	24 e1       	ldi	r18, 0x14	; 20
     4de:	31 e0       	ldi	r19, 0x01	; 1
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4ea:	fa 01       	movw	r30, r20
     4ec:	31 83       	std	Z+1, r19	; 0x01
     4ee:	20 83       	st	Z, r18
	return Size;
}
     4f0:	08 95       	ret

000004f2 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     4f8:	fc 01       	movw	r30, r24
     4fa:	70 96       	adiw	r30, 0x10	; 16
     4fc:	8b e0       	ldi	r24, 0x0B	; 11
     4fe:	df 01       	movw	r26, r30
     500:	1d 92       	st	X+, r1
     502:	8a 95       	dec	r24
     504:	e9 f7       	brne	.-6      	; 0x500 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     50a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Endpoint_ConfigureEndpointTable>
     51a:	88 23       	and	r24, r24
     51c:	61 f0       	breq	.+24     	; 0x536 <CDC_Device_ConfigureEndpoints+0x44>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	ce 01       	movw	r24, r28
     522:	06 96       	adiw	r24, 0x06	; 6
     524:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Endpoint_ConfigureEndpointTable>
     528:	88 23       	and	r24, r24
     52a:	29 f0       	breq	.+10     	; 0x536 <CDC_Device_ConfigureEndpoints+0x44>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	ce 01       	movw	r24, r28
     530:	0b 96       	adiw	r24, 0x0b	; 11
     532:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <CDC_Device_Flush>:
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     53c:	20 91 40 01 	lds	r18, 0x0140
     540:	24 30       	cpi	r18, 0x04	; 4
     542:	19 f5       	brne	.+70     	; 0x58a <CDC_Device_Flush+0x4e>
     544:	fc 01       	movw	r30, r24
     546:	44 89       	ldd	r20, Z+20	; 0x14
     548:	55 89       	ldd	r21, Z+21	; 0x15
     54a:	66 89       	ldd	r22, Z+22	; 0x16
     54c:	77 89       	ldd	r23, Z+23	; 0x17
     54e:	45 2b       	or	r20, r21
     550:	46 2b       	or	r20, r22
     552:	47 2b       	or	r20, r23
     554:	e1 f0       	breq	.+56     	; 0x58e <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     55e:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     562:	88 23       	and	r24, r24
     564:	b1 f0       	breq	.+44     	; 0x592 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     566:	e8 ee       	ldi	r30, 0xE8	; 232
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     56c:	90 81       	ld	r25, Z
     56e:	9e 77       	andi	r25, 0x7E	; 126
     570:	90 83       	st	Z, r25

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     572:	85 fd       	sbrc	r24, 5
     574:	10 c0       	rjmp	.+32     	; 0x596 <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     576:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Endpoint_WaitUntilReady>
     57a:	81 11       	cpse	r24, r1
     57c:	0d c0       	rjmp	.+26     	; 0x598 <CDC_Device_Flush+0x5c>
     57e:	e8 ee       	ldi	r30, 0xE8	; 232
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	90 81       	ld	r25, Z
     584:	9e 77       	andi	r25, 0x7E	; 126
     586:	90 83       	st	Z, r25
     588:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	08 95       	ret
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     596:	80 e0       	ldi	r24, 0x00	; 0
}
     598:	08 95       	ret

0000059a <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     59a:	20 91 40 01 	lds	r18, 0x0140
     59e:	24 30       	cpi	r18, 0x04	; 4
     5a0:	91 f4       	brne	.+36     	; 0x5c6 <CDC_Device_USBTask+0x2c>
     5a2:	fc 01       	movw	r30, r24
     5a4:	44 89       	ldd	r20, Z+20	; 0x14
     5a6:	55 89       	ldd	r21, Z+21	; 0x15
     5a8:	66 89       	ldd	r22, Z+22	; 0x16
     5aa:	77 89       	ldd	r23, Z+23	; 0x17
     5ac:	45 2b       	or	r20, r21
     5ae:	46 2b       	or	r20, r22
     5b0:	47 2b       	or	r20, r23
     5b2:	49 f0       	breq	.+18     	; 0x5c6 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5b4:	21 81       	ldd	r18, Z+1	; 0x01
     5b6:	2f 70       	andi	r18, 0x0F	; 15
     5b8:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5bc:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     5c0:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     5c2:	0e 94 9e 02 	call	0x53c	; 0x53c <CDC_Device_Flush>
     5c6:	08 95       	ret

000005c8 <CDC_Device_ReceiveByte>:
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     5c8:	20 91 40 01 	lds	r18, 0x0140
     5cc:	24 30       	cpi	r18, 0x04	; 4
     5ce:	39 f5       	brne	.+78     	; 0x61e <CDC_Device_ReceiveByte+0x56>
     5d0:	fc 01       	movw	r30, r24
     5d2:	44 89       	ldd	r20, Z+20	; 0x14
     5d4:	55 89       	ldd	r21, Z+21	; 0x15
     5d6:	66 89       	ldd	r22, Z+22	; 0x16
     5d8:	77 89       	ldd	r23, Z+23	; 0x17
     5da:	45 2b       	or	r20, r21
     5dc:	46 2b       	or	r20, r22
     5de:	47 2b       	or	r20, r23
     5e0:	09 f1       	breq	.+66     	; 0x624 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5e2:	86 81       	ldd	r24, Z+6	; 0x06
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ea:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	1c c0       	rjmp	.+56     	; 0x62a <CDC_Device_ReceiveByte+0x62>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5f2:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     5f6:	88 23       	and	r24, r24
     5f8:	21 f0       	breq	.+8      	; 0x602 <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5fa:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     606:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     60a:	81 11       	cpse	r24, r1
     60c:	11 c0       	rjmp	.+34     	; 0x630 <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     60e:	e8 ee       	ldi	r30, 0xE8	; 232
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	8b 77       	andi	r24, 0x7B	; 123
     616:	80 83       	st	Z, r24
     618:	82 2f       	mov	r24, r18
     61a:	93 2f       	mov	r25, r19
     61c:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	08 95       	ret
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	08 95       	ret

	int16_t ReceivedByte = -1;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	9f ef       	ldi	r25, 0xFF	; 255
     62e:	08 95       	ret
     630:	82 2f       	mov	r24, r18
     632:	93 2f       	mov	r25, r19
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     634:	08 95       	ret

00000636 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     636:	08 95       	ret

00000638 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     63e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     642:	83 ff       	sbrs	r24, 3
     644:	9c c0       	rjmp	.+312    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     646:	88 81       	ld	r24, Y
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	20 91 45 01 	lds	r18, 0x0145
     64e:	30 91 46 01 	lds	r19, 0x0146
     652:	28 17       	cp	r18, r24
     654:	39 07       	cpc	r19, r25
     656:	09 f0       	breq	.+2      	; 0x65a <CDC_Device_ProcessControlRequest+0x22>
     658:	92 c0       	rjmp	.+292    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
	  return;

	switch (USB_ControlRequest.bRequest)
     65a:	80 91 42 01 	lds	r24, 0x0142
     65e:	81 32       	cpi	r24, 0x21	; 33
     660:	59 f0       	breq	.+22     	; 0x678 <CDC_Device_ProcessControlRequest+0x40>
     662:	18 f4       	brcc	.+6      	; 0x66a <CDC_Device_ProcessControlRequest+0x32>
     664:	80 32       	cpi	r24, 0x20	; 32
     666:	c1 f1       	breq	.+112    	; 0x6d8 <CDC_Device_ProcessControlRequest+0xa0>
     668:	8a c0       	rjmp	.+276    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
     66a:	82 32       	cpi	r24, 0x22	; 34
     66c:	09 f4       	brne	.+2      	; 0x670 <CDC_Device_ProcessControlRequest+0x38>
     66e:	62 c0       	rjmp	.+196    	; 0x734 <CDC_Device_ProcessControlRequest+0xfc>
     670:	83 32       	cpi	r24, 0x23	; 35
     672:	09 f4       	brne	.+2      	; 0x676 <CDC_Device_ProcessControlRequest+0x3e>
     674:	74 c0       	rjmp	.+232    	; 0x75e <CDC_Device_ProcessControlRequest+0x126>
     676:	83 c0       	rjmp	.+262    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     678:	80 91 41 01 	lds	r24, 0x0141
     67c:	81 3a       	cpi	r24, 0xA1	; 161
     67e:	09 f0       	breq	.+2      	; 0x682 <CDC_Device_ProcessControlRequest+0x4a>
     680:	7e c0       	rjmp	.+252    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     682:	e8 ee       	ldi	r30, 0xE8	; 232
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	87 7f       	andi	r24, 0xF7	; 247
     68a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     68c:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     68e:	80 ff       	sbrs	r24, 0
     690:	fd cf       	rjmp	.-6      	; 0x68c <CDC_Device_ProcessControlRequest+0x54>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     692:	4c 89       	ldd	r20, Y+20	; 0x14
     694:	5d 89       	ldd	r21, Y+21	; 0x15
     696:	6e 89       	ldd	r22, Y+22	; 0x16
     698:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     69a:	e1 ef       	ldi	r30, 0xF1	; 241
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	40 83       	st	Z, r20
				UEDATX = (Data >> 8);
     6a0:	bb 27       	eor	r27, r27
     6a2:	a7 2f       	mov	r26, r23
     6a4:	96 2f       	mov	r25, r22
     6a6:	85 2f       	mov	r24, r21
     6a8:	80 83       	st	Z, r24
				UEDATX = (Data >> 16);
     6aa:	cb 01       	movw	r24, r22
     6ac:	aa 27       	eor	r26, r26
     6ae:	bb 27       	eor	r27, r27
     6b0:	80 83       	st	Z, r24
				UEDATX = (Data >> 24);
     6b2:	47 2f       	mov	r20, r23
     6b4:	55 27       	eor	r21, r21
     6b6:	66 27       	eor	r22, r22
     6b8:	77 27       	eor	r23, r23
     6ba:	40 83       	st	Z, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     6bc:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6be:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     6c0:	89 8d       	ldd	r24, Y+25	; 0x19
     6c2:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     6c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6c6:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6c8:	e8 ee       	ldi	r30, 0xE8	; 232
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	8e 77       	andi	r24, 0x7E	; 126
     6d0:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     6d2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>
     6d6:	53 c0       	rjmp	.+166    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6d8:	80 91 41 01 	lds	r24, 0x0141
     6dc:	81 32       	cpi	r24, 0x21	; 33
     6de:	09 f0       	breq	.+2      	; 0x6e2 <CDC_Device_ProcessControlRequest+0xaa>
     6e0:	4e c0       	rjmp	.+156    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6e2:	e8 ee       	ldi	r30, 0xE8	; 232
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	87 7f       	andi	r24, 0xF7	; 247
     6ea:	80 83       	st	Z, r24
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <CDC_Device_ProcessControlRequest+0xc0>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     6ee:	80 91 40 01 	lds	r24, 0x0140
     6f2:	88 23       	and	r24, r24
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <CDC_Device_ProcessControlRequest+0xc0>
     6f6:	43 c0       	rjmp	.+134    	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6f8:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     6fa:	82 ff       	sbrs	r24, 2
     6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <CDC_Device_ProcessControlRequest+0xb6>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     6fe:	e1 ef       	ldi	r30, 0xF1	; 241
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     704:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     706:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     708:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     70a:	3c 8b       	std	Y+20, r19	; 0x14
     70c:	2d 8b       	std	Y+21, r18	; 0x15
     70e:	9e 8b       	std	Y+22, r25	; 0x16
     710:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     712:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     714:	88 8f       	std	Y+24, r24	; 0x18
     716:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     718:	89 8f       	std	Y+25, r24	; 0x19
     71a:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     71c:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     71e:	e8 ee       	ldi	r30, 0xE8	; 232
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	8b 77       	andi	r24, 0x7B	; 123
     726:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     728:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <EVENT_CDC_Device_LineEncodingChanged>
     732:	25 c0       	rjmp	.+74     	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     734:	80 91 41 01 	lds	r24, 0x0141
     738:	81 32       	cpi	r24, 0x21	; 33
     73a:	09 f5       	brne	.+66     	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     73c:	e8 ee       	ldi	r30, 0xE8	; 232
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	87 7f       	andi	r24, 0xF7	; 247
     744:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     746:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     74a:	80 91 43 01 	lds	r24, 0x0143
     74e:	90 91 44 01 	lds	r25, 0x0144
     752:	99 8b       	std	Y+17, r25	; 0x11
     754:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     756:	ce 01       	movw	r24, r28
     758:	0e 94 1b 03 	call	0x636	; 0x636 <CDC_Device_Event_Stub>
     75c:	10 c0       	rjmp	.+32     	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     75e:	80 91 41 01 	lds	r24, 0x0141
     762:	81 32       	cpi	r24, 0x21	; 33
     764:	61 f4       	brne	.+24     	; 0x77e <CDC_Device_ProcessControlRequest+0x146>
     766:	e8 ee       	ldi	r30, 0xE8	; 232
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	87 7f       	andi	r24, 0xF7	; 247
     76e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     770:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     774:	60 91 43 01 	lds	r22, 0x0143
     778:	ce 01       	movw	r24, r28
     77a:	0e 94 1b 03 	call	0x636	; 0x636 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     794:	20 91 47 01 	lds	r18, 0x0147
     798:	30 91 48 01 	lds	r19, 0x0148
     79c:	26 17       	cp	r18, r22
     79e:	37 07       	cpc	r19, r23
     7a0:	58 f0       	brcs	.+22     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x34>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7a2:	61 15       	cp	r22, r1
     7a4:	71 05       	cpc	r23, r1
     7a6:	39 f4       	brne	.+14     	; 0x7b6 <Endpoint_Write_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7a8:	e8 ee       	ldi	r30, 0xE8	; 232
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	20 81       	ld	r18, Z
     7ae:	2e 77       	andi	r18, 0x7E	; 126
     7b0:	20 83       	st	Z, r18
     7b2:	9b 01       	movw	r18, r22
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x34>
     7b6:	9b 01       	movw	r18, r22
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     7b8:	48 2f       	mov	r20, r24
     7ba:	59 2f       	mov	r21, r25
     7bc:	a0 e0       	ldi	r26, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7be:	e8 ee       	ldi	r30, 0xE8	; 232
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f2 ef       	ldi	r31, 0xF2	; 242
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f1 2c       	mov	r15, r1
     7ca:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7cc:	c1 ef       	ldi	r28, 0xF1	; 241
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7d0:	dd 24       	eor	r13, r13
     7d2:	d3 94       	inc	r13
     7d4:	c1 2c       	mov	r12, r1
     7d6:	43 c0       	rjmp	.+134    	; 0x85e <Endpoint_Write_Control_Stream_LE+0xda>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7d8:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7dc:	88 23       	and	r24, r24
     7de:	09 f4       	brne	.+2      	; 0x7e2 <Endpoint_Write_Control_Stream_LE+0x5e>
     7e0:	53 c0       	rjmp	.+166    	; 0x888 <Endpoint_Write_Control_Stream_LE+0x104>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7e2:	85 30       	cpi	r24, 0x05	; 5
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <Endpoint_Write_Control_Stream_LE+0x64>
     7e6:	52 c0       	rjmp	.+164    	; 0x88c <Endpoint_Write_Control_Stream_LE+0x108>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7e8:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7ea:	83 fd       	sbrc	r24, 3
     7ec:	51 c0       	rjmp	.+162    	; 0x890 <Endpoint_Write_Control_Stream_LE+0x10c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7ee:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7f0:	82 ff       	sbrs	r24, 2
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <Endpoint_Write_Control_Stream_LE+0x76>
     7f4:	e8 ee       	ldi	r30, 0xE8	; 232
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	42 c0       	rjmp	.+132    	; 0x87e <Endpoint_Write_Control_Stream_LE+0xfa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fa:	80 81       	ld	r24, Z
		  break;

		if (Endpoint_IsINReady())
     7fc:	80 ff       	sbrs	r24, 0
     7fe:	2f c0       	rjmp	.+94     	; 0x85e <Endpoint_Write_Control_Stream_LE+0xda>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     800:	d7 01       	movw	r26, r14
     802:	0c 91       	ld	r16, X
     804:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     806:	21 15       	cp	r18, r1
     808:	31 05       	cpc	r19, r1
     80a:	d9 f0       	breq	.+54     	; 0x842 <Endpoint_Write_Control_Stream_LE+0xbe>
     80c:	80 91 1b 01 	lds	r24, 0x011B
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	08 17       	cp	r16, r24
     814:	19 07       	cpc	r17, r25
     816:	b8 f4       	brcc	.+46     	; 0x846 <Endpoint_Write_Control_Stream_LE+0xc2>
     818:	da 01       	movw	r26, r20
     81a:	04 1b       	sub	r16, r20
     81c:	15 0b       	sbc	r17, r21
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     81e:	8d 91       	ld	r24, X+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     820:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     822:	ad 01       	movw	r20, r26
				Length--;
     824:	21 50       	subi	r18, 0x01	; 1
     826:	31 09       	sbc	r19, r1
     828:	c8 01       	movw	r24, r16
     82a:	8a 0f       	add	r24, r26
     82c:	9b 1f       	adc	r25, r27

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     82e:	21 15       	cp	r18, r1
     830:	31 05       	cpc	r19, r1
     832:	51 f0       	breq	.+20     	; 0x848 <Endpoint_Write_Control_Stream_LE+0xc4>
     834:	60 91 1b 01 	lds	r22, 0x011B
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	86 17       	cp	r24, r22
     83c:	97 07       	cpc	r25, r23
     83e:	78 f3       	brcs	.-34     	; 0x81e <Endpoint_Write_Control_Stream_LE+0x9a>
     840:	03 c0       	rjmp	.+6      	; 0x848 <Endpoint_Write_Control_Stream_LE+0xc4>
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     842:	c8 01       	movw	r24, r16
     844:	01 c0       	rjmp	.+2      	; 0x848 <Endpoint_Write_Control_Stream_LE+0xc4>
     846:	c8 01       	movw	r24, r16
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     848:	60 91 1b 01 	lds	r22, 0x011B
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	ad 2d       	mov	r26, r13
     850:	68 17       	cp	r22, r24
     852:	79 07       	cpc	r23, r25
     854:	09 f0       	breq	.+2      	; 0x858 <Endpoint_Write_Control_Stream_LE+0xd4>
     856:	ac 2d       	mov	r26, r12
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     858:	80 81       	ld	r24, Z
     85a:	8e 77       	andi	r24, 0x7E	; 126
     85c:	80 83       	st	Z, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     85e:	21 15       	cp	r18, r1
     860:	31 05       	cpc	r19, r1
     862:	09 f0       	breq	.+2      	; 0x866 <Endpoint_Write_Control_Stream_LE+0xe2>
     864:	b9 cf       	rjmp	.-142    	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x54>
     866:	a1 11       	cpse	r26, r1
     868:	b7 cf       	rjmp	.-146    	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x54>
     86a:	c4 cf       	rjmp	.-120    	; 0x7f4 <Endpoint_Write_Control_Stream_LE+0x70>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     86c:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     870:	88 23       	and	r24, r24
     872:	81 f0       	breq	.+32     	; 0x894 <Endpoint_Write_Control_Stream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	81 f0       	breq	.+32     	; 0x898 <Endpoint_Write_Control_Stream_LE+0x114>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     878:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     87a:	83 fd       	sbrc	r24, 3
     87c:	0f c0       	rjmp	.+30     	; 0x89c <Endpoint_Write_Control_Stream_LE+0x118>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     87e:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     880:	82 ff       	sbrs	r24, 2
     882:	f4 cf       	rjmp	.-24     	; 0x86c <Endpoint_Write_Control_Stream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0b c0       	rjmp	.+22     	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	09 c0       	rjmp	.+18     	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	07 c0       	rjmp	.+14     	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	05 c0       	rjmp	.+10     	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	03 c0       	rjmp	.+6      	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	01 c0       	rjmp	.+2      	; 0x89e <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     89c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	08 95       	ret

000008b0 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8bc:	20 91 47 01 	lds	r18, 0x0147
     8c0:	30 91 48 01 	lds	r19, 0x0148
     8c4:	26 17       	cp	r18, r22
     8c6:	37 07       	cpc	r19, r23
     8c8:	58 f0       	brcs	.+22     	; 0x8e0 <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	39 f4       	brne	.+14     	; 0x8de <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8d0:	e8 ee       	ldi	r30, 0xE8	; 232
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	20 81       	ld	r18, Z
     8d6:	2e 77       	andi	r18, 0x7E	; 126
     8d8:	20 83       	st	Z, r18
     8da:	9b 01       	movw	r18, r22
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <Endpoint_Write_Control_PStream_LE+0x30>
     8de:	9b 01       	movw	r18, r22

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     8e0:	48 2f       	mov	r20, r24
     8e2:	59 2f       	mov	r21, r25
     8e4:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8e6:	a8 ee       	ldi	r26, 0xE8	; 232
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     8ea:	02 ef       	ldi	r16, 0xF2	; 242
     8ec:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ee:	c1 ef       	ldi	r28, 0xF1	; 241
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8f2:	ff 24       	eor	r15, r15
     8f4:	f3 94       	inc	r15
     8f6:	e1 2c       	mov	r14, r1
     8f8:	46 c0       	rjmp	.+140    	; 0x986 <Endpoint_Write_Control_PStream_LE+0xd6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8fa:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8fe:	88 23       	and	r24, r24
     900:	09 f4       	brne	.+2      	; 0x904 <Endpoint_Write_Control_PStream_LE+0x54>
     902:	56 c0       	rjmp	.+172    	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0x100>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     904:	85 30       	cpi	r24, 0x05	; 5
     906:	09 f4       	brne	.+2      	; 0x90a <Endpoint_Write_Control_PStream_LE+0x5a>
     908:	55 c0       	rjmp	.+170    	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0x104>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     90a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     90c:	83 fd       	sbrc	r24, 3
     90e:	54 c0       	rjmp	.+168    	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x108>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     910:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     912:	82 ff       	sbrs	r24, 2
     914:	03 c0       	rjmp	.+6      	; 0x91c <Endpoint_Write_Control_PStream_LE+0x6c>
     916:	e8 ee       	ldi	r30, 0xE8	; 232
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	45 c0       	rjmp	.+138    	; 0x9a6 <Endpoint_Write_Control_PStream_LE+0xf6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     91c:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     91e:	80 ff       	sbrs	r24, 0
     920:	32 c0       	rjmp	.+100    	; 0x986 <Endpoint_Write_Control_PStream_LE+0xd6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     922:	f8 01       	movw	r30, r16
     924:	60 81       	ld	r22, Z
     926:	70 e0       	ldi	r23, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     928:	21 15       	cp	r18, r1
     92a:	31 05       	cpc	r19, r1
     92c:	d9 f0       	breq	.+54     	; 0x964 <Endpoint_Write_Control_PStream_LE+0xb4>
     92e:	80 91 1b 01 	lds	r24, 0x011B
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	68 17       	cp	r22, r24
     936:	79 07       	cpc	r23, r25
     938:	c0 f4       	brcc	.+48     	; 0x96a <Endpoint_Write_Control_PStream_LE+0xba>
     93a:	fa 01       	movw	r30, r20
     93c:	64 1b       	sub	r22, r20
     93e:	75 0b       	sbc	r23, r21
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     940:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     942:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     944:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     946:	21 50       	subi	r18, 0x01	; 1
     948:	31 09       	sbc	r19, r1
     94a:	cf 01       	movw	r24, r30
     94c:	86 0f       	add	r24, r22
     94e:	97 1f       	adc	r25, r23

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     950:	21 15       	cp	r18, r1
     952:	31 05       	cpc	r19, r1
     954:	61 f0       	breq	.+24     	; 0x96e <Endpoint_Write_Control_PStream_LE+0xbe>
     956:	40 91 1b 01 	lds	r20, 0x011B
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	78 f3       	brcs	.-34     	; 0x940 <Endpoint_Write_Control_PStream_LE+0x90>
     962:	05 c0       	rjmp	.+10     	; 0x96e <Endpoint_Write_Control_PStream_LE+0xbe>
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     964:	cb 01       	movw	r24, r22

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     966:	fa 01       	movw	r30, r20
     968:	02 c0       	rjmp	.+4      	; 0x96e <Endpoint_Write_Control_PStream_LE+0xbe>
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     96a:	cb 01       	movw	r24, r22

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     96c:	fa 01       	movw	r30, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     96e:	40 91 1b 01 	lds	r20, 0x011B
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	6f 2d       	mov	r22, r15
     976:	48 17       	cp	r20, r24
     978:	59 07       	cpc	r21, r25
     97a:	09 f0       	breq	.+2      	; 0x97e <Endpoint_Write_Control_PStream_LE+0xce>
     97c:	6e 2d       	mov	r22, r14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     97e:	8c 91       	ld	r24, X
     980:	8e 77       	andi	r24, 0x7E	; 126
     982:	8c 93       	st	X, r24
     984:	af 01       	movw	r20, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     986:	21 15       	cp	r18, r1
     988:	31 05       	cpc	r19, r1
     98a:	09 f0       	breq	.+2      	; 0x98e <Endpoint_Write_Control_PStream_LE+0xde>
     98c:	b6 cf       	rjmp	.-148    	; 0x8fa <Endpoint_Write_Control_PStream_LE+0x4a>
     98e:	61 11       	cpse	r22, r1
     990:	b4 cf       	rjmp	.-152    	; 0x8fa <Endpoint_Write_Control_PStream_LE+0x4a>
     992:	c1 cf       	rjmp	.-126    	; 0x916 <Endpoint_Write_Control_PStream_LE+0x66>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     994:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     998:	88 23       	and	r24, r24
     99a:	81 f0       	breq	.+32     	; 0x9bc <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     99c:	85 30       	cpi	r24, 0x05	; 5
     99e:	81 f0       	breq	.+32     	; 0x9c0 <Endpoint_Write_Control_PStream_LE+0x110>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9a0:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9a2:	83 fd       	sbrc	r24, 3
     9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0x114>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a6:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9a8:	82 ff       	sbrs	r24, 2
     9aa:	f4 cf       	rjmp	.-24     	; 0x994 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x116>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9f0:	00 91 47 01 	lds	r16, 0x0147
     9f4:	10 91 48 01 	lds	r17, 0x0148
     9f8:	06 17       	cp	r16, r22
     9fa:	17 07       	cpc	r17, r23
     9fc:	58 f0       	brcs	.+22     	; 0xa14 <Endpoint_Write_Control_EStream_LE+0x40>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9fe:	61 15       	cp	r22, r1
     a00:	71 05       	cpc	r23, r1
     a02:	39 f4       	brne	.+14     	; 0xa12 <Endpoint_Write_Control_EStream_LE+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a04:	e8 ee       	ldi	r30, 0xE8	; 232
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	20 81       	ld	r18, Z
     a0a:	2e 77       	andi	r18, 0x7E	; 126
     a0c:	20 83       	st	Z, r18
     a0e:	8b 01       	movw	r16, r22
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <Endpoint_Write_Control_EStream_LE+0x40>
     a12:	8b 01       	movw	r16, r22

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a14:	28 2f       	mov	r18, r24
     a16:	39 2f       	mov	r19, r25
     a18:	40 e0       	ldi	r20, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a1a:	c8 ee       	ldi	r28, 0xE8	; 232
     a1c:	d0 e0       	ldi	r29, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a1e:	0f 2e       	mov	r0, r31
     a20:	f2 ef       	ldi	r31, 0xF2	; 242
     a22:	af 2e       	mov	r10, r31
     a24:	b1 2c       	mov	r11, r1
     a26:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a28:	0f 2e       	mov	r0, r31
     a2a:	f1 ef       	ldi	r31, 0xF1	; 241
     a2c:	ef 2e       	mov	r14, r31
     a2e:	f1 2c       	mov	r15, r1
     a30:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a32:	77 24       	eor	r7, r7
     a34:	73 94       	inc	r7
     a36:	61 2c       	mov	r6, r1
     a38:	4b c0       	rjmp	.+150    	; 0xad0 <Endpoint_Write_Control_EStream_LE+0xfc>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a3a:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <Endpoint_Write_Control_EStream_LE+0x70>
     a42:	5b c0       	rjmp	.+182    	; 0xafa <Endpoint_Write_Control_EStream_LE+0x126>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a44:	85 30       	cpi	r24, 0x05	; 5
     a46:	09 f4       	brne	.+2      	; 0xa4a <Endpoint_Write_Control_EStream_LE+0x76>
     a48:	5a c0       	rjmp	.+180    	; 0xafe <Endpoint_Write_Control_EStream_LE+0x12a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a4a:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a4c:	83 fd       	sbrc	r24, 3
     a4e:	59 c0       	rjmp	.+178    	; 0xb02 <Endpoint_Write_Control_EStream_LE+0x12e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a50:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a52:	82 ff       	sbrs	r24, 2
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <Endpoint_Write_Control_EStream_LE+0x88>
     a56:	e8 ee       	ldi	r30, 0xE8	; 232
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	4a c0       	rjmp	.+148    	; 0xaf0 <Endpoint_Write_Control_EStream_LE+0x11c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a5c:	88 81       	ld	r24, Y
		  break;

		if (Endpoint_IsINReady())
     a5e:	80 ff       	sbrs	r24, 0
     a60:	37 c0       	rjmp	.+110    	; 0xad0 <Endpoint_Write_Control_EStream_LE+0xfc>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a62:	f5 01       	movw	r30, r10
     a64:	c0 80       	ld	r12, Z
     a66:	d1 2c       	mov	r13, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a68:	01 15       	cp	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	01 f1       	breq	.+64     	; 0xaae <Endpoint_Write_Control_EStream_LE+0xda>
     a6e:	80 91 1b 01 	lds	r24, 0x011B
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	c8 16       	cp	r12, r24
     a76:	d9 06       	cpc	r13, r25
     a78:	e8 f4       	brcc	.+58     	; 0xab4 <Endpoint_Write_Control_EStream_LE+0xe0>
     a7a:	49 01       	movw	r8, r18
     a7c:	c2 1a       	sub	r12, r18
     a7e:	d3 0a       	sbc	r13, r19
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a80:	c4 01       	movw	r24, r8
     a82:	0e 94 99 0b 	call	0x1732	; 0x1732 <__eerd_byte_usb162>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a86:	f7 01       	movw	r30, r14
     a88:	80 83       	st	Z, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a8a:	ff ef       	ldi	r31, 0xFF	; 255
     a8c:	8f 1a       	sub	r8, r31
     a8e:	9f 0a       	sbc	r9, r31
				Length--;
     a90:	01 50       	subi	r16, 0x01	; 1
     a92:	11 09       	sbc	r17, r1
     a94:	c4 01       	movw	r24, r8
     a96:	8c 0d       	add	r24, r12
     a98:	9d 1d       	adc	r25, r13

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a9a:	01 15       	cp	r16, r1
     a9c:	11 05       	cpc	r17, r1
     a9e:	61 f0       	breq	.+24     	; 0xab8 <Endpoint_Write_Control_EStream_LE+0xe4>
     aa0:	20 91 1b 01 	lds	r18, 0x011B
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	82 17       	cp	r24, r18
     aa8:	93 07       	cpc	r25, r19
     aaa:	50 f3       	brcs	.-44     	; 0xa80 <Endpoint_Write_Control_EStream_LE+0xac>
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <Endpoint_Write_Control_EStream_LE+0xe4>
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     aae:	c6 01       	movw	r24, r12

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ab0:	49 01       	movw	r8, r18
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <Endpoint_Write_Control_EStream_LE+0xe4>
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
     ab4:	c6 01       	movw	r24, r12

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ab6:	49 01       	movw	r8, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ab8:	20 91 1b 01 	lds	r18, 0x011B
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	47 2d       	mov	r20, r7
     ac0:	28 17       	cp	r18, r24
     ac2:	39 07       	cpc	r19, r25
     ac4:	09 f0       	breq	.+2      	; 0xac8 <Endpoint_Write_Control_EStream_LE+0xf4>
     ac6:	46 2d       	mov	r20, r6
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac8:	88 81       	ld	r24, Y
     aca:	8e 77       	andi	r24, 0x7E	; 126
     acc:	88 83       	st	Y, r24
     ace:	94 01       	movw	r18, r8
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ad0:	01 15       	cp	r16, r1
     ad2:	11 05       	cpc	r17, r1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <Endpoint_Write_Control_EStream_LE+0x104>
     ad6:	b1 cf       	rjmp	.-158    	; 0xa3a <Endpoint_Write_Control_EStream_LE+0x66>
     ad8:	41 11       	cpse	r20, r1
     ada:	af cf       	rjmp	.-162    	; 0xa3a <Endpoint_Write_Control_EStream_LE+0x66>
     adc:	bc cf       	rjmp	.-136    	; 0xa56 <Endpoint_Write_Control_EStream_LE+0x82>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ade:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ae2:	88 23       	and	r24, r24
     ae4:	81 f0       	breq	.+32     	; 0xb06 <Endpoint_Write_Control_EStream_LE+0x132>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ae6:	85 30       	cpi	r24, 0x05	; 5
     ae8:	81 f0       	breq	.+32     	; 0xb0a <Endpoint_Write_Control_EStream_LE+0x136>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     aea:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     aec:	83 fd       	sbrc	r24, 3
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <Endpoint_Write_Control_EStream_LE+0x13a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     af0:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     af2:	82 ff       	sbrs	r24, 2
     af4:	f4 cf       	rjmp	.-24     	; 0xade <Endpoint_Write_Control_EStream_LE+0x10a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	09 c0       	rjmp	.+18     	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	08 95       	ret

00000b2e <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b44:	85 30       	cpi	r24, 0x05	; 5
     b46:	70 f1       	brcs	.+92     	; 0xba4 <Endpoint_ConfigureEndpoint_Prv+0x76>
     b48:	26 c0       	rjmp	.+76     	; 0xb96 <Endpoint_ConfigureEndpoint_Prv+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b4a:	59 2f       	mov	r21, r25
     b4c:	5f 70       	andi	r21, 0x0F	; 15
     b4e:	e8 01       	movw	r28, r16
     b50:	58 83       	st	Y, r21
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     b52:	89 17       	cp	r24, r25
     b54:	31 f0       	breq	.+12     	; 0xb62 <Endpoint_ConfigureEndpoint_Prv+0x34>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     b56:	e9 01       	movw	r28, r18
     b58:	d8 80       	ld	r13, Y
			UECFG1XTemp = UECFG1X;
     b5a:	50 81       	ld	r21, Z
			UEIENXTemp  = UEIENX;
     b5c:	e4 01       	movw	r28, r8
     b5e:	78 81       	ld	r23, Y
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <Endpoint_ConfigureEndpoint_Prv+0x3a>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     b62:	5b 2d       	mov	r21, r11

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     b64:	d6 2e       	mov	r13, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     b66:	7c 2d       	mov	r23, r12
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b68:	51 ff       	sbrs	r21, 1
     b6a:	12 c0       	rjmp	.+36     	; 0xb90 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b6c:	4c 91       	ld	r20, X
     b6e:	4e 7f       	andi	r20, 0xFE	; 254
     b70:	4c 93       	st	X, r20
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     b72:	40 81       	ld	r20, Z
     b74:	4d 7f       	andi	r20, 0xFD	; 253
     b76:	40 83       	st	Z, r20
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     b78:	4c 91       	ld	r20, X
     b7a:	41 60       	ori	r20, 0x01	; 1
     b7c:	4c 93       	st	X, r20

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     b7e:	e9 01       	movw	r28, r18
     b80:	d8 82       	st	Y, r13
		UECFG1X = UECFG1XTemp;
     b82:	50 83       	st	Z, r21
		UEIENX  = UEIENXTemp;
     b84:	e4 01       	movw	r28, r8
     b86:	78 83       	st	Y, r23
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     b88:	e7 01       	movw	r28, r14
     b8a:	58 81       	ld	r21, Y

		if (!(Endpoint_IsConfigured()))
     b8c:	55 23       	and	r21, r21
     b8e:	44 f4       	brge	.+16     	; 0xba0 <Endpoint_ConfigureEndpoint_Prv+0x72>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b90:	9f 5f       	subi	r25, 0xFF	; 255
     b92:	95 30       	cpi	r25, 0x05	; 5
     b94:	d1 f6       	brne	.-76     	; 0xb4a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b96:	8f 70       	andi	r24, 0x0F	; 15
     b98:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	1f c0       	rjmp	.+62     	; 0xbde <Endpoint_ConfigureEndpoint_Prv+0xb0>
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	1d c0       	rjmp	.+58     	; 0xbde <Endpoint_ConfigureEndpoint_Prv+0xb0>
     ba4:	98 2f       	mov	r25, r24
     ba6:	9f 70       	andi	r25, 0x0F	; 15
     ba8:	90 93 e9 00 	sts	0x00E9, r25
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     bac:	98 2f       	mov	r25, r24
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     bae:	54 2f       	mov	r21, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     bb0:	d6 2e       	mov	r13, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     bb2:	70 e0       	ldi	r23, 0x00	; 0
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     bb4:	ab ee       	ldi	r26, 0xEB	; 235
     bb6:	b0 e0       	ldi	r27, 0x00	; 0

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     bb8:	ed ee       	ldi	r30, 0xED	; 237
     bba:	f0 e0       	ldi	r31, 0x00	; 0

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     bbc:	2c ee       	ldi	r18, 0xEC	; 236
     bbe:	30 e0       	ldi	r19, 0x00	; 0
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;
     bc0:	0f 2e       	mov	r0, r31
     bc2:	f0 ef       	ldi	r31, 0xF0	; 240
     bc4:	8f 2e       	mov	r8, r31
     bc6:	91 2c       	mov	r9, r1
     bc8:	f0 2d       	mov	r31, r0
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     bca:	0f 2e       	mov	r0, r31
     bcc:	fe ee       	ldi	r31, 0xEE	; 238
     bce:	ef 2e       	mov	r14, r31
     bd0:	f1 2c       	mov	r15, r1
     bd2:	f0 2d       	mov	r31, r0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bd4:	09 ee       	ldi	r16, 0xE9	; 233
     bd6:	10 e0       	ldi	r17, 0x00	; 0
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     bd8:	b4 2e       	mov	r11, r20
			UEIENXTemp  = 0;
     bda:	c1 2c       	mov	r12, r1
     bdc:	c5 cf       	rjmp	.-118    	; 0xb68 <Endpoint_ConfigureEndpoint_Prv+0x3a>
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	08 95       	ret

00000bf6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	06 2f       	mov	r16, r22
	for (uint8_t i = 0; i < Entries; i++)
     c0a:	66 23       	and	r22, r22
     c0c:	09 f4       	brne	.+2      	; 0xc10 <Endpoint_ConfigureEndpointTable+0x1a>
     c0e:	42 c0       	rjmp	.+132    	; 0xc94 <Endpoint_ConfigureEndpointTable+0x9e>
     c10:	c8 2f       	mov	r28, r24
     c12:	d9 2f       	mov	r29, r25
     c14:	10 e0       	ldi	r17, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c16:	f1 2c       	mov	r15, r1
				uint16_t CheckBytes = 8;
     c18:	68 94       	set
     c1a:	dd 24       	eor	r13, r13
     c1c:	d3 f8       	bld	r13, 3
     c1e:	e1 2c       	mov	r14, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c20:	68 94       	set
     c22:	bb 24       	eor	r11, r11
     c24:	b1 f8       	bld	r11, 1
     c26:	0f 2e       	mov	r0, r31
     c28:	f6 e0       	ldi	r31, 0x06	; 6
     c2a:	cf 2e       	mov	r12, r31
     c2c:	f0 2d       	mov	r31, r0
	{
		if (!(Table[i].Address))
     c2e:	58 81       	ld	r21, Y
     c30:	55 23       	and	r21, r21
     c32:	59 f1       	breq	.+86     	; 0xc8a <Endpoint_ConfigureEndpointTable+0x94>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     c3c:	85 2f       	mov	r24, r21
     c3e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	50 f5       	brcc	.+84     	; 0xc98 <Endpoint_ConfigureEndpointTable+0xa2>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c44:	92 30       	cpi	r25, 0x02	; 2
     c46:	10 f0       	brcs	.+4      	; 0xc4c <Endpoint_ConfigureEndpointTable+0x56>
     c48:	4c 2d       	mov	r20, r12
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <Endpoint_ConfigureEndpointTable+0x58>
     c4c:	4b 2d       	mov	r20, r11
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     c4e:	e9 30       	cpi	r30, 0x09	; 9
     c50:	f1 05       	cpc	r31, r1
     c52:	50 f0       	brcs	.+20     	; 0xc68 <Endpoint_ConfigureEndpointTable+0x72>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     c54:	2d 2d       	mov	r18, r13
     c56:	3e 2d       	mov	r19, r14
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c58:	9f 2d       	mov	r25, r15
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     c60:	2e 17       	cp	r18, r30
     c62:	3f 07       	cpc	r19, r31
     c64:	d0 f3       	brcs	.-12     	; 0xc5a <Endpoint_ConfigureEndpointTable+0x64>
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <Endpoint_ConfigureEndpointTable+0x74>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c68:	9f 2d       	mov	r25, r15
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c6a:	92 95       	swap	r25
     c6c:	90 7f       	andi	r25, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c6e:	49 2b       	or	r20, r25
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     c70:	55 1f       	adc	r21, r21
     c72:	55 27       	eor	r21, r21
     c74:	55 1f       	adc	r21, r21
     c76:	72 95       	swap	r23
     c78:	77 0f       	add	r23, r23
     c7a:	77 0f       	add	r23, r23
     c7c:	70 7c       	andi	r23, 0xC0	; 192
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c7e:	67 2f       	mov	r22, r23
     c80:	65 2b       	or	r22, r21
     c82:	0e 94 97 05 	call	0xb2e	; 0xb2e <Endpoint_ConfigureEndpoint_Prv>
     c86:	88 23       	and	r24, r24
     c88:	51 f0       	breq	.+20     	; 0xc9e <Endpoint_ConfigureEndpointTable+0xa8>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c8a:	1f 5f       	subi	r17, 0xFF	; 255
     c8c:	25 96       	adiw	r28, 0x05	; 5
     c8e:	10 13       	cpse	r17, r16
     c90:	ce cf       	rjmp	.-100    	; 0xc2e <Endpoint_ConfigureEndpointTable+0x38>
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <Endpoint_ConfigureEndpointTable+0xa6>

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <Endpoint_ConfigureEndpointTable+0xa8>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <Endpoint_ConfigureEndpointTable+0xa8>
	}

	return true;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	08 95       	ret

00000cb2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cb2:	80 91 41 01 	lds	r24, 0x0141
     cb6:	88 23       	and	r24, r24
     cb8:	1c f0       	brlt	.+6      	; 0xcc0 <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cba:	e8 ee       	ldi	r30, 0xE8	; 232
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	14 c0       	rjmp	.+40     	; 0xce8 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cc0:	e8 ee       	ldi	r30, 0xE8	; 232
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <Endpoint_ClearStatusStage+0x1c>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     cc6:	80 91 40 01 	lds	r24, 0x0140
     cca:	88 23       	and	r24, r24
     ccc:	a9 f0       	breq	.+42     	; 0xcf8 <Endpoint_ClearStatusStage+0x46>
     cce:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     cd0:	82 ff       	sbrs	r24, 2
     cd2:	f9 cf       	rjmp	.-14     	; 0xcc6 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cd4:	e8 ee       	ldi	r30, 0xE8	; 232
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 77       	andi	r24, 0x7B	; 123
     cdc:	80 83       	st	Z, r24
     cde:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce0:	80 91 40 01 	lds	r24, 0x0140
     ce4:	88 23       	and	r24, r24
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ce8:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     cea:	80 ff       	sbrs	r24, 0
     cec:	f9 cf       	rjmp	.-14     	; 0xce0 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cee:	e8 ee       	ldi	r30, 0xE8	; 232
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 77       	andi	r24, 0x7E	; 126
     cf6:	80 83       	st	Z, r24
     cf8:	08 95       	ret

00000cfa <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d02:	20 91 e4 00 	lds	r18, 0x00E4
     d06:	30 91 e5 00 	lds	r19, 0x00E5
     d0a:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d0c:	ac ee       	ldi	r26, 0xEC	; 236
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d10:	e8 ee       	ldi	r30, 0xE8	; 232
     d12:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d14:	0b ee       	ldi	r16, 0xEB	; 235
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	44 ee       	ldi	r20, 0xE4	; 228
     d1a:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d1c:	8c 91       	ld	r24, X
     d1e:	80 fd       	sbrc	r24, 0
     d20:	21 c0       	rjmp	.+66     	; 0xd64 <Endpoint_WaitUntilReady+0x6a>
     d22:	24 c0       	rjmp	.+72     	; 0xd6c <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d24:	80 91 40 01 	lds	r24, 0x0140

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d28:	88 23       	and	r24, r24
     d2a:	81 f0       	breq	.+32     	; 0xd4c <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d2c:	85 30       	cpi	r24, 0x05	; 5
     d2e:	81 f0       	breq	.+32     	; 0xd50 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d30:	e8 01       	movw	r28, r16
     d32:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d34:	85 fd       	sbrc	r24, 5
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <Endpoint_WaitUntilReady+0x5a>
     d38:	ea 01       	movw	r28, r20
     d3a:	88 81       	ld	r24, Y
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d3e:	28 17       	cp	r18, r24
     d40:	39 07       	cpc	r19, r25
     d42:	61 f3       	breq	.-40     	; 0xd1c <Endpoint_WaitUntilReady+0x22>
     d44:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d46:	41 f0       	breq	.+16     	; 0xd58 <Endpoint_WaitUntilReady+0x5e>
     d48:	9c 01       	movw	r18, r24
     d4a:	e8 cf       	rjmp	.-48     	; 0xd1c <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	12 c0       	rjmp	.+36     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	08 c0       	rjmp	.+16     	; 0xd74 <Endpoint_WaitUntilReady+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d64:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d66:	80 ff       	sbrs	r24, 0
     d68:	dd cf       	rjmp	.-70     	; 0xd24 <Endpoint_WaitUntilReady+0x2a>
     d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d6c:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d6e:	82 ff       	sbrs	r24, 2
     d70:	d9 cf       	rjmp	.-78     	; 0xd24 <Endpoint_WaitUntilReady+0x2a>
     d72:	f6 cf       	rjmp	.-20     	; 0xd60 <Endpoint_WaitUntilReady+0x66>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	00 d0       	rcall	.+0      	; 0xd84 <USB_ResetInterface+0x6>
     d84:	1f 92       	push	r1
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d8a:	0e 94 56 07 	call	0xeac	; 0xeac <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d8e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d92:	e8 ed       	ldi	r30, 0xD8	; 216
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 77       	andi	r24, 0x7F	; 127
     d9a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     d9c:	80 81       	ld	r24, Z
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     da2:	80 81       	ld	r24, Z
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	80 83       	st	Z, r24
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
		#endif

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     da8:	80 91 3b 01 	lds	r24, 0x013B
     dac:	82 fd       	sbrc	r24, 2
     dae:	07 c0       	rjmp	.+14     	; 0xdbe <USB_ResetInterface+0x40>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	89 bd       	out	0x29, r24	; 41
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     db8:	09 b4       	in	r0, 0x29	; 41
     dba:	00 fe       	sbrs	r0, 0
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <USB_ResetInterface+0x3a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     dbe:	10 92 40 01 	sts	0x0140, r1
	USB_Device_ConfigurationNumber  = 0;
     dc2:	10 92 3c 01 	sts	0x013C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     dc6:	10 92 3e 01 	sts	0x013E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     dca:	10 92 3d 01 	sts	0x013D, r1

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr, &DescriptorAddressSpace) != NO_DESCRIPTOR)
     dce:	9e 01       	movw	r18, r28
     dd0:	2d 5f       	subi	r18, 0xFD	; 253
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	ae 01       	movw	r20, r28
     dd6:	4f 5f       	subi	r20, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 3c 02 	call	0x478	; 0x478 <CALLBACK_USB_GetDescriptor>
     de4:	89 2b       	or	r24, r25
     de6:	c9 f0       	breq	.+50     	; 0xe1a <USB_ResetInterface+0x9c>
	{
		if (DescriptorAddressSpace == MEMSPACE_FLASH)
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	81 11       	cpse	r24, r1
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <USB_ResetInterface+0x7e>
		  USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	37 96       	adiw	r30, 0x07	; 7
     df4:	e4 91       	lpm	r30, Z
     df6:	e0 93 1b 01 	sts	0x011B, r30
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <USB_ResetInterface+0x9c>
		else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	41 f4       	brne	.+16     	; 0xe10 <USB_ResetInterface+0x92>
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	07 96       	adiw	r24, 0x07	; 7
     e06:	0e 94 99 0b 	call	0x1732	; 0x1732 <__eerd_byte_usb162>
     e0a:	80 93 1b 01 	sts	0x011B, r24
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <USB_ResetInterface+0x9c>
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	87 81       	ldd	r24, Z+7	; 0x07
     e16:	80 93 1b 01 	sts	0x011B, r24
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     e1a:	20 91 1b 01 	lds	r18, 0x011B
     e1e:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e20:	29 30       	cpi	r18, 0x09	; 9
     e22:	31 05       	cpc	r19, r1
     e24:	50 f0       	brcs	.+20     	; 0xe3a <USB_ResetInterface+0xbc>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     e2a:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     e2c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	d0 f3       	brcs	.-12     	; 0xe2c <USB_ResetInterface+0xae>
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <USB_ResetInterface+0xbe>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     e3a:	40 e0       	ldi	r20, 0x00	; 0
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     e3c:	42 95       	swap	r20
     e3e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e40:	42 60       	ori	r20, 0x02	; 2
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 97 05 	call	0xb2e	; 0xb2e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e4a:	e1 ee       	ldi	r30, 0xE1	; 225
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e54:	e2 ee       	ldi	r30, 0xE2	; 226
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e64:	e0 ee       	ldi	r30, 0xE0	; 224
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <USB_Init>:
               const uint8_t Options
               #endif
               )
{
	#if !defined(USE_STATIC_OPTIONS)
	USB_Options = Options;
     e7a:	80 93 3b 01 	sts	0x013B, r24
	 * the loaded application. This causes VBUS detection to fail unless we first force
	 * it off to reset it. */
	USB_OTGPAD_Off();
	#endif

	if (!(USB_Options & USB_OPT_REG_DISABLED))
     e7e:	80 91 3b 01 	lds	r24, 0x013B
     e82:	81 fd       	sbrc	r24, 1
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <USB_Init+0x18>
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     e86:	e3 e6       	ldi	r30, 0x63	; 99
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	80 83       	st	Z, r24
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <USB_Init+0x22>
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
     e92:	e3 e6       	ldi	r30, 0x63	; 99
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
	  USB_REG_On();
	else
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
     e9c:	80 91 3b 01 	lds	r24, 0x013B
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	80 93 3f 01 	sts	0x013F, r24

	USB_ResetInterface();
     ea6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <USB_ResetInterface>
     eaa:	08 95       	ret

00000eac <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     eac:	10 92 e2 00 	sts	0x00E2, r1
     eb0:	08 95       	ret

00000eb2 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     eb2:	10 92 e1 00 	sts	0x00E1, r1
     eb6:	08 95       	ret

00000eb8 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     eda:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ede:	82 ff       	sbrs	r24, 2
     ee0:	0b c0       	rjmp	.+22     	; 0xef8 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ee2:	80 91 e2 00 	lds	r24, 0x00E2
     ee6:	82 ff       	sbrs	r24, 2
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     eea:	e1 ee       	ldi	r30, 0xE1	; 225
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ef4:	0e 94 c2 09 	call	0x1384	; 0x1384 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ef8:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     efc:	80 ff       	sbrs	r24, 0
     efe:	19 c0       	rjmp	.+50     	; 0xf32 <__vector_11+0x7a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f00:	80 91 e2 00 	lds	r24, 0x00E2
     f04:	80 ff       	sbrs	r24, 0
     f06:	15 c0       	rjmp	.+42     	; 0xf32 <__vector_11+0x7a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f08:	e2 ee       	ldi	r30, 0xE2	; 226
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f12:	80 81       	ld	r24, Z
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f18:	e8 ed       	ldi	r30, 0xD8	; 216
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 62       	ori	r24, 0x20	; 32
     f20:	80 83       	st	Z, r24
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		USB_CLK_Freeze();

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     f22:	80 91 3b 01 	lds	r24, 0x013B
     f26:	82 ff       	sbrs	r24, 2
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f28:	19 bc       	out	0x29, r1	; 41
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     f2a:	10 92 40 01 	sts	0x0140, r1
		EVENT_USB_Device_Disconnect();
     f2e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f32:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f36:	84 ff       	sbrs	r24, 4
     f38:	34 c0       	rjmp	.+104    	; 0xfa2 <__vector_11+0xea>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f3a:	80 91 e2 00 	lds	r24, 0x00E2
     f3e:	84 ff       	sbrs	r24, 4
     f40:	30 c0       	rjmp	.+96     	; 0xfa2 <__vector_11+0xea>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     f42:	80 91 3b 01 	lds	r24, 0x013B
     f46:	82 fd       	sbrc	r24, 2
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <__vector_11+0xa0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	89 bd       	out	0x29, r24	; 41
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f52:	09 b4       	in	r0, 0x29	; 41
     f54:	00 fe       	sbrs	r0, 0
     f56:	fd cf       	rjmp	.-6      	; 0xf52 <__vector_11+0x9a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f58:	e8 ed       	ldi	r30, 0xD8	; 216
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 7d       	andi	r24, 0xDF	; 223
     f60:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f62:	e1 ee       	ldi	r30, 0xE1	; 225
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8f 7e       	andi	r24, 0xEF	; 239
     f6a:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f6c:	e2 ee       	ldi	r30, 0xE2	; 226
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f76:	80 81       	ld	r24, Z
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f7c:	80 91 3c 01 	lds	r24, 0x013C
     f80:	88 23       	and	r24, r24
     f82:	21 f0       	breq	.+8      	; 0xf8c <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	80 93 40 01 	sts	0x0140, r24
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <__vector_11+0xe6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f8c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     f90:	88 23       	and	r24, r24
     f92:	14 f4       	brge	.+4      	; 0xf98 <__vector_11+0xe0>
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <__vector_11+0xe2>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 40 01 	sts	0x0140, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     f9e:	0e 94 cf 00 	call	0x19e	; 0x19e <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fa2:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fa6:	83 ff       	sbrs	r24, 3
     fa8:	33 c0       	rjmp	.+102    	; 0x1010 <__vector_11+0x158>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     faa:	80 91 e2 00 	lds	r24, 0x00E2
     fae:	83 ff       	sbrs	r24, 3
     fb0:	2f c0       	rjmp	.+94     	; 0x1010 <__vector_11+0x158>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     fb2:	e1 ee       	ldi	r30, 0xE1	; 225
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	80 93 40 01 	sts	0x0140, r24
		USB_Device_ConfigurationNumber = 0;
     fc2:	10 92 3c 01 	sts	0x013C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fc6:	80 81       	ld	r24, Z
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fcc:	e2 ee       	ldi	r30, 0xE2	; 226
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fd6:	80 81       	ld	r24, Z
     fd8:	80 61       	ori	r24, 0x10	; 16
     fda:	80 83       	st	Z, r24

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     fdc:	20 91 1b 01 	lds	r18, 0x011B
     fe0:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     fe2:	29 30       	cpi	r18, 0x09	; 9
     fe4:	31 05       	cpc	r19, r1
     fe6:	50 f0       	brcs	.+20     	; 0xffc <__vector_11+0x144>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	90 e0       	ldi	r25, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     fec:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     fee:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     ff4:	82 17       	cp	r24, r18
     ff6:	93 07       	cpc	r25, r19
     ff8:	d0 f3       	brcs	.-12     	; 0xfee <__vector_11+0x136>
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <__vector_11+0x146>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     ffc:	40 e0       	ldi	r20, 0x00	; 0
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ffe:	42 95       	swap	r20
    1000:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1002:	42 60       	ori	r20, 0x02	; 2
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 97 05 	call	0xb2e	; 0xb2e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    100c:	0e 94 c2 09 	call	0x1384	; 0x1384 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	ab 97       	sbiw	r28, 0x2b	; 43
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	e1 e4       	ldi	r30, 0x41	; 65
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	89 e4       	ldi	r24, 0x49	; 73
    1050:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1052:	a1 ef       	ldi	r26, 0xF1	; 241
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1058:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    105a:	e8 17       	cp	r30, r24
    105c:	f9 07       	cpc	r31, r25
    105e:	d9 f7       	brne	.-10     	; 0x1056 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1060:	0e 94 e7 00 	call	0x1ce	; 0x1ce <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1064:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1068:	83 ff       	sbrs	r24, 3
    106a:	67 c1       	rjmp	.+718    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    106c:	30 91 41 01 	lds	r19, 0x0141

		switch (USB_ControlRequest.bRequest)
    1070:	20 91 42 01 	lds	r18, 0x0142
    1074:	82 2f       	mov	r24, r18
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	8a 30       	cpi	r24, 0x0A	; 10
    107a:	91 05       	cpc	r25, r1
    107c:	08 f0       	brcs	.+2      	; 0x1080 <USB_Device_ProcessControlRequest+0x4e>
    107e:	5d c1       	rjmp	.+698    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    1080:	fc 01       	movw	r30, r24
    1082:	e6 5c       	subi	r30, 0xC6	; 198
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    108a:	30 38       	cpi	r19, 0x80	; 128
    108c:	21 f0       	breq	.+8      	; 0x1096 <USB_Device_ProcessControlRequest+0x64>
    108e:	32 38       	cpi	r19, 0x82	; 130
    1090:	09 f0       	breq	.+2      	; 0x1094 <USB_Device_ProcessControlRequest+0x62>
    1092:	53 c1       	rjmp	.+678    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1096:	80 91 3d 01 	lds	r24, 0x013D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    109a:	90 91 3e 01 	lds	r25, 0x013E
    109e:	99 23       	and	r25, r25
    10a0:	71 f0       	breq	.+28     	; 0x10be <USB_Device_ProcessControlRequest+0x8c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	0c c0       	rjmp	.+24     	; 0x10be <USB_Device_ProcessControlRequest+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10a6:	80 91 45 01 	lds	r24, 0x0145
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	e9 ee       	ldi	r30, 0xE9	; 233
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10b2:	80 91 eb 00 	lds	r24, 0x00EB
    10b6:	85 fb       	bst	r24, 5
    10b8:	88 27       	eor	r24, r24
    10ba:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10bc:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10be:	e8 ee       	ldi	r30, 0xE8	; 232
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	90 81       	ld	r25, Z
    10c4:	97 7f       	andi	r25, 0xF7	; 247
    10c6:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10c8:	a1 ef       	ldi	r26, 0xF1	; 241
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    10ce:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 77       	andi	r24, 0x7E	; 126
    10d4:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10d6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>
    10da:	2f c1       	rjmp	.+606    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10dc:	33 23       	and	r19, r19
    10de:	09 f4       	brne	.+2      	; 0x10e2 <USB_Device_ProcessControlRequest+0xb0>
    10e0:	3b c1       	rjmp	.+630    	; 0x1358 <USB_Device_ProcessControlRequest+0x326>
    10e2:	32 30       	cpi	r19, 0x02	; 2
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <USB_Device_ProcessControlRequest+0xb6>
    10e6:	29 c1       	rjmp	.+594    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    10e8:	3c c1       	rjmp	.+632    	; 0x1362 <USB_Device_ProcessControlRequest+0x330>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	23 30       	cpi	r18, 0x03	; 3
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <USB_Device_ProcessControlRequest+0xc0>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	80 93 3e 01 	sts	0x013E, r24
    10f6:	28 c0       	rjmp	.+80     	; 0x1148 <USB_Device_ProcessControlRequest+0x116>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10f8:	20 91 45 01 	lds	r18, 0x0145
    10fc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    10fe:	09 f4       	brne	.+2      	; 0x1102 <USB_Device_ProcessControlRequest+0xd0>
    1100:	1c c1       	rjmp	.+568    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1102:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1106:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    110a:	80 ff       	sbrs	r24, 0
    110c:	1d c0       	rjmp	.+58     	; 0x1148 <USB_Device_ProcessControlRequest+0x116>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    110e:	80 91 42 01 	lds	r24, 0x0142
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	31 f4       	brne	.+12     	; 0x1122 <USB_Device_ProcessControlRequest+0xf0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1116:	eb ee       	ldi	r30, 0xEB	; 235
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 62       	ori	r24, 0x20	; 32
    111e:	80 83       	st	Z, r24
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1122:	eb ee       	ldi	r30, 0xEB	; 235
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 61       	ori	r24, 0x10	; 16
    112a:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <USB_Device_ProcessControlRequest+0x104>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	2a 95       	dec	r18
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <USB_Device_ProcessControlRequest+0x100>
    113a:	aa ee       	ldi	r26, 0xEA	; 234
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	8c 93       	st	X, r24
				UERST = 0;
    1140:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1142:	80 81       	ld	r24, Z
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1148:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114c:	e8 ee       	ldi	r30, 0xE8	; 232
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	87 7f       	andi	r24, 0xF7	; 247
    1154:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1156:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>
    115a:	ef c0       	rjmp	.+478    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    115c:	31 11       	cpse	r19, r1
    115e:	ed c0       	rjmp	.+474    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1160:	10 91 43 01 	lds	r17, 0x0143
    1164:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1166:	e3 ee       	ldi	r30, 0xE3	; 227
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 78       	andi	r24, 0x80	; 128
    116e:	81 2b       	or	r24, r17
    1170:	80 83       	st	Z, r24
    1172:	e8 ee       	ldi	r30, 0xE8	; 232
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	87 7f       	andi	r24, 0xF7	; 247
    117a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    117c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1180:	e8 ee       	ldi	r30, 0xE8	; 232
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1186:	80 ff       	sbrs	r24, 0
    1188:	fd cf       	rjmp	.-6      	; 0x1184 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    118a:	e3 ee       	ldi	r30, 0xE3	; 227
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1194:	11 23       	and	r17, r17
    1196:	11 f0       	breq	.+4      	; 0x119c <USB_Device_ProcessControlRequest+0x16a>
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	01 c0       	rjmp	.+2      	; 0x119e <USB_Device_ProcessControlRequest+0x16c>
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	80 93 40 01 	sts	0x0140, r24
    11a2:	cb c0       	rjmp	.+406    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11a4:	30 58       	subi	r19, 0x80	; 128
    11a6:	32 30       	cpi	r19, 0x02	; 2
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <USB_Device_ProcessControlRequest+0x17a>
    11aa:	c7 c0       	rjmp	.+398    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11ac:	80 91 43 01 	lds	r24, 0x0143
    11b0:	90 91 44 01 	lds	r25, 0x0144
    11b4:	8c 3d       	cpi	r24, 0xDC	; 220
    11b6:	23 e0       	ldi	r18, 0x03	; 3
    11b8:	92 07       	cpc	r25, r18
    11ba:	a1 f5       	brne	.+104    	; 0x1224 <USB_Device_ProcessControlRequest+0x1f2>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11c0:	8a e2       	ldi	r24, 0x2A	; 42
    11c2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11c4:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11c6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    11c8:	de 01       	movw	r26, r28
    11ca:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11cc:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    11ce:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11d0:	41 e2       	ldi	r20, 0x21	; 33
    11d2:	e3 2f       	mov	r30, r19
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	40 93 57 00 	sts	0x0057, r20
    11da:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    11dc:	20 ff       	sbrs	r18, 0
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
    11e0:	82 95       	swap	r24
    11e2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    11e4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11e6:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11e8:	8a 30       	cpi	r24, 0x0A	; 10
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <USB_Device_ProcessControlRequest+0x1c0>
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	c7 96       	adiw	r24, 0x37	; 55
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <USB_Device_ProcessControlRequest+0x1c4>
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	c0 96       	adiw	r24, 0x30	; 48
    11f6:	8d 93       	st	X+, r24
    11f8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	24 31       	cpi	r18, 0x14	; 20
    11fe:	49 f7       	brne	.-46     	; 0x11d2 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1200:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1202:	08 ee       	ldi	r16, 0xE8	; 232
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	f8 01       	movw	r30, r16
    1208:	80 81       	ld	r24, Z
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    120e:	6a e2       	ldi	r22, 0x2A	; 42
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 c2 03 	call	0x784	; 0x784 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    121a:	f8 01       	movw	r30, r16
    121c:	80 81       	ld	r24, Z
    121e:	8b 77       	andi	r24, 0x7B	; 123
    1220:	80 83       	st	Z, r24
    1222:	8b c0       	rjmp	.+278    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1224:	9e 01       	movw	r18, r28
    1226:	25 5d       	subi	r18, 0xD5	; 213
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	ae 01       	movw	r20, r28
    122c:	4f 5f       	subi	r20, 0xFF	; 255
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	60 91 45 01 	lds	r22, 0x0145
    1234:	0e 94 3c 02 	call	0x478	; 0x478 <CALLBACK_USB_GetDescriptor>
    1238:	bc 01       	movw	r22, r24
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	09 f4       	brne	.+2      	; 0x1240 <USB_Device_ProcessControlRequest+0x20e>
    123e:	7d c0       	rjmp	.+250    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1240:	e8 ee       	ldi	r30, 0xE8	; 232
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	87 7f       	andi	r24, 0xF7	; 247
    1248:	80 83       	st	Z, r24
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    124a:	8b a5       	ldd	r24, Y+43	; 0x2b
    124c:	81 11       	cpse	r24, r1
    124e:	05 c0       	rjmp	.+10     	; 0x125a <USB_Device_ProcessControlRequest+0x228>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	0e 94 58 04 	call	0x8b0	; 0x8b0 <Endpoint_Write_Control_PStream_LE>
    1258:	0b c0       	rjmp	.+22     	; 0x1270 <USB_Device_ProcessControlRequest+0x23e>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	29 f4       	brne	.+10     	; 0x1268 <USB_Device_ProcessControlRequest+0x236>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Endpoint_Write_Control_EStream_LE>
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <USB_Device_ProcessControlRequest+0x23e>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	0e 94 c2 03 	call	0x784	; 0x784 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1270:	e8 ee       	ldi	r30, 0xE8	; 232
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8b 77       	andi	r24, 0x7B	; 123
    1278:	80 83       	st	Z, r24
    127a:	5f c0       	rjmp	.+190    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    127c:	30 38       	cpi	r19, 0x80	; 128
    127e:	09 f0       	breq	.+2      	; 0x1282 <USB_Device_ProcessControlRequest+0x250>
    1280:	5c c0       	rjmp	.+184    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1282:	e8 ee       	ldi	r30, 0xE8	; 232
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    128c:	80 91 3c 01 	lds	r24, 0x013C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1290:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1294:	80 81       	ld	r24, Z
    1296:	8e 77       	andi	r24, 0x7E	; 126
    1298:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    129a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>
    129e:	4d c0       	rjmp	.+154    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12a0:	31 11       	cpse	r19, r1
    12a2:	4b c0       	rjmp	.+150    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
		#else
			uint8_t MemoryAddressSpace;
		#endif
	#endif

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
    12a4:	9e 01       	movw	r18, r28
    12a6:	25 5d       	subi	r18, 0xD5	; 213
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	ae 01       	movw	r20, r28
    12ac:	4f 5f       	subi	r20, 0xFF	; 255
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 3c 02 	call	0x478	; 0x478 <CALLBACK_USB_GetDescriptor>
    12ba:	89 2b       	or	r24, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <USB_Device_ProcessControlRequest+0x28e>
    12be:	3d c0       	rjmp	.+122    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
	{
		return;
	}

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	if (MemoryAddressSpace == MEMSPACE_FLASH)
    12c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c2:	81 11       	cpse	r24, r1
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <USB_Device_ProcessControlRequest+0x2a6>
	{
		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	71 96       	adiw	r30, 0x11	; 17
    12cc:	e4 91       	lpm	r30, Z
    12ce:	80 91 43 01 	lds	r24, 0x0143
    12d2:	e8 17       	cp	r30, r24
    12d4:	90 f1       	brcs	.+100    	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <USB_Device_ProcessControlRequest+0x2cc>
		  return;
	}
	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	51 f4       	brne	.+20     	; 0x12f0 <USB_Device_ProcessControlRequest+0x2be>
	{
		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	41 96       	adiw	r24, 0x11	; 17
    12e2:	0e 94 99 0b 	call	0x1732	; 0x1732 <__eerd_byte_usb162>
    12e6:	90 91 43 01 	lds	r25, 0x0143
    12ea:	89 17       	cp	r24, r25
    12ec:	30 f1       	brcs	.+76     	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <USB_Device_ProcessControlRequest+0x2cc>
		  return;
	}
	else
	{
		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	90 91 43 01 	lds	r25, 0x0143
    12f8:	81 89       	ldd	r24, Z+17	; 0x11
    12fa:	89 17       	cp	r24, r25
    12fc:	f0 f0       	brcs	.+60     	; 0x133a <USB_Device_ProcessControlRequest+0x308>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1308:	80 91 43 01 	lds	r24, 0x0143
    130c:	80 93 3c 01 	sts	0x013C, r24

	Endpoint_ClearStatusStage();
    1310:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1314:	80 91 3c 01 	lds	r24, 0x013C
    1318:	88 23       	and	r24, r24
    131a:	21 f0       	breq	.+8      	; 0x1324 <USB_Device_ProcessControlRequest+0x2f2>
	  USB_DeviceState = DEVICE_STATE_Configured;
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	80 93 40 01 	sts	0x0140, r24
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <USB_Device_ProcessControlRequest+0x304>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1324:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1328:	88 23       	and	r24, r24
    132a:	14 f4       	brge	.+4      	; 0x1330 <USB_Device_ProcessControlRequest+0x2fe>
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <USB_Device_ProcessControlRequest+0x300>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 40 01 	sts	0x0140, r24

	EVENT_USB_Device_ConfigurationChanged();
    1336:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    133a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    133e:	83 ff       	sbrs	r24, 3
    1340:	16 c0       	rjmp	.+44     	; 0x136e <USB_Device_ProcessControlRequest+0x33c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1342:	e8 ee       	ldi	r30, 0xE8	; 232
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    134c:	eb ee       	ldi	r30, 0xEB	; 235
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 62       	ori	r24, 0x20	; 32
    1354:	80 83       	st	Z, r24
    1356:	0b c0       	rjmp	.+22     	; 0x136e <USB_Device_ProcessControlRequest+0x33c>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1358:	80 91 43 01 	lds	r24, 0x0143
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	69 f7       	brne	.-38     	; 0x133a <USB_Device_ProcessControlRequest+0x308>
    1360:	c4 ce       	rjmp	.-632    	; 0x10ea <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1362:	80 91 43 01 	lds	r24, 0x0143
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <USB_Device_ProcessControlRequest+0x33a>
    136a:	c6 ce       	rjmp	.-628    	; 0x10f8 <USB_Device_ProcessControlRequest+0xc6>
    136c:	ed ce       	rjmp	.-550    	; 0x1148 <USB_Device_ProcessControlRequest+0x116>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    136e:	ab 96       	adiw	r28, 0x2b	; 43
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1384:	08 95       	ret

00001386 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1386:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1388:	80 91 40 01 	lds	r24, 0x0140
    138c:	88 23       	and	r24, r24
    138e:	a9 f0       	breq	.+42     	; 0x13ba <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1390:	c0 91 e9 00 	lds	r28, 0x00E9
    1394:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1396:	80 91 ec 00 	lds	r24, 0x00EC
    139a:	80 ff       	sbrs	r24, 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USB_USBTask+0x1c>
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <USB_USBTask+0x1e>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13a4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13a6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13aa:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    13ae:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    13b0:	0e 94 19 08 	call	0x1032	; 0x1032 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b4:	cf 70       	andi	r28, 0x0F	; 15
    13b6:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <nrf24l01_readregister>:

/*
 * read one register
 */
extern uint8_t nrf24l01_readregister(uint8_t reg) {	
	nrf24l01_CSNlo; //low CSN	
    13be:	28 98       	cbi	0x05, 0	; 5
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
    13c0:	8f 71       	andi	r24, 0x1F	; 31
    13c2:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register	
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN	
    13cc:	28 9a       	sbi	0x05, 0	; 5
    return result;
}
    13ce:	08 95       	ret

000013d0 <nrf24l01_writeregister>:
}

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
    13d0:	cf 93       	push	r28
    13d2:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
    13d4:	28 98       	cbi	0x05, 0	; 5
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
    13d6:	8f 71       	andi	r24, 0x1F	; 31
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	spi_writereadbyte(value); //write register
    13de:	8c 2f       	mov	r24, r28
    13e0:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
    13e4:	28 9a       	sbi	0x05, 0	; 5
}
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	f6 2e       	mov	r15, r22
    13f6:	17 2f       	mov	r17, r23
    13f8:	04 2f       	mov	r16, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    13fa:	28 98       	cbi	0x05, 0	; 5
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
    13fc:	8f 71       	andi	r24, 0x1F	; 31
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	for(i=0; i<len; i++)
    1404:	00 23       	and	r16, r16
    1406:	49 f0       	breq	.+18     	; 0x141a <nrf24l01_writeregisters+0x30>
    1408:	cf 2d       	mov	r28, r15
    140a:	d1 2f       	mov	r29, r17
    140c:	10 e0       	ldi	r17, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
    140e:	89 91       	ld	r24, Y+
    1410:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
    1414:	1f 5f       	subi	r17, 0xFF	; 255
    1416:	10 13       	cpse	r17, r16
    1418:	fa cf       	rjmp	.-12     	; 0x140e <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
    141a:	28 9a       	sbi	0x05, 0	; 5
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	08 95       	ret

00001428 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	04 96       	adiw	r24, 0x04	; 4
    142e:	fb 01       	movw	r30, r22
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	dc 01       	movw	r26, r24
    1436:	a2 1b       	sub	r26, r18
    1438:	b3 0b       	sbc	r27, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
    143a:	4c 91       	ld	r20, X
    143c:	40 83       	st	Z, r20
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
    1442:	25 30       	cpi	r18, 0x05	; 5
    1444:	31 05       	cpc	r19, r1
    1446:	99 f7       	brne	.-26     	; 0x142e <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
    1448:	08 95       	ret

0000144a <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <nrf24l01_setrxaddr+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <nrf24l01_setrxaddr+0x8>
    1452:	1f 92       	push	r1
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9b 01       	movw	r18, r22
	if(pipe == 0) {
    145a:	81 11       	cpse	r24, r1
    145c:	15 c0       	rjmp	.+42     	; 0x1488 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
    145e:	85 e0       	ldi	r24, 0x05	; 5
    1460:	fb 01       	movw	r30, r22
    1462:	a1 e2       	ldi	r26, 0x21	; 33
    1464:	b1 e0       	ldi	r27, 0x01	; 1
    1466:	01 90       	ld	r0, Z+
    1468:	0d 92       	st	X+, r0
    146a:	8a 95       	dec	r24
    146c:	e1 f7       	brne	.-8      	; 0x1466 <nrf24l01_setrxaddr+0x1c>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
    146e:	be 01       	movw	r22, r28
    1470:	6f 5f       	subi	r22, 0xFF	; 255
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	c9 01       	movw	r24, r18
    1476:	0e 94 14 0a 	call	0x1428	; 0x1428 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
    147a:	45 e0       	ldi	r20, 0x05	; 5
    147c:	be 01       	movw	r22, r28
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nrf24l01_writeregisters>
		#if NRF24L01_ENABLEDP4 == 1
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
		#endif
	}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	00 d0       	rcall	.+0      	; 0x149e <nrf24l01_settxaddr+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <nrf24l01_settxaddr+0x8>
    14a0:	1f 92       	push	r1
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
    14a6:	25 e0       	ldi	r18, 0x05	; 5
    14a8:	fc 01       	movw	r30, r24
    14aa:	ac e1       	ldi	r26, 0x1C	; 28
    14ac:	b1 e0       	ldi	r27, 0x01	; 1
    14ae:	01 90       	ld	r0, Z+
    14b0:	0d 92       	st	X+, r0
    14b2:	2a 95       	dec	r18
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <nrf24l01_settxaddr+0x16>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
    14b6:	be 01       	movw	r22, r28
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	0e 94 14 0a 	call	0x1428	; 0x1428 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
    14c0:	45 e0       	ldi	r20, 0x05	; 5
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8a e0       	ldi	r24, 0x0A	; 10
    14ca:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
    14ce:	45 e0       	ldi	r20, 0x05	; 5
    14d0:	be 01       	movw	r22, r28
    14d2:	6f 5f       	subi	r22, 0xFF	; 255
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	80 e1       	ldi	r24, 0x10	; 16
    14d8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nrf24l01_writeregisters>
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
    14ec:	28 98       	cbi	0x05, 0	; 5
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
    14ee:	82 ee       	ldi	r24, 0xE2	; 226
    14f0:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
    14f4:	28 9a       	sbi	0x05, 0	; 5
    14f6:	08 95       	ret

000014f8 <nrf24l01_flushTXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
    14f8:	28 98       	cbi	0x05, 0	; 5
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
    14fa:	81 ee       	ldi	r24, 0xE1	; 225
    14fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
    1500:	28 9a       	sbi	0x05, 0	; 5
    1502:	08 95       	ret

00001504 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
    1504:	61 e2       	ldi	r22, 0x21	; 33
    1506:	71 e0       	ldi	r23, 0x01	; 1
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 25 0a 	call	0x144a	; 0x144a <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1514:	68 2f       	mov	r22, r24
    1516:	61 60       	ori	r22, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1524:	68 2f       	mov	r22, r24
    1526:	62 60       	ori	r22, 0x02	; 2
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
    152e:	60 e7       	ldi	r22, 0x70	; 112
    1530:	87 e0       	ldi	r24, 0x07	; 7
    1532:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
    1536:	0e 94 76 0a 	call	0x14ec	; 0x14ec <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
    153a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
    153e:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1540:	87 e5       	ldi	r24, 0x57	; 87
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <nrf24l01_setRX+0x40>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <nrf24l01_setRX+0x46>
    154a:	00 00       	nop
    154c:	08 95       	ret

0000154e <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening		
    154e:	2d 98       	cbi	0x05, 5	; 5
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode	
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1556:	68 2f       	mov	r22, r24
    1558:	6e 7f       	andi	r22, 0xFE	; 254
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up	
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1566:	68 2f       	mov	r22, r24
    1568:	62 60       	ori	r22, 0x02	; 2
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status	
    1570:	60 e7       	ldi	r22, 0x70	; 112
    1572:	87 e0       	ldi	r24, 0x07	; 7
    1574:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo	
    1578:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <nrf24l01_flushTXfifo>
    157c:	87 e5       	ldi	r24, 0x57	; 87
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <nrf24l01_setTX+0x32>
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <nrf24l01_setTX+0x38>
    1586:	00 00       	nop
    1588:	08 95       	ret

0000158a <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
    158a:	28 98       	cbi	0x05, 0	; 5
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
    1592:	28 9a       	sbi	0x05, 0	; 5
	return status;
}
    1594:	08 95       	ret

00001596 <nrf24l01_write>:
}

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	uint8_t ret = 0;
  
	//set tx mode
	nrf24l01_setTX(); //150uS
    159c:	0e 94 a7 0a 	call	0x154e	; 0x154e <nrf24l01_setTX>
	 
	
	//write data
	nrf24l01_CSNlo; //low CSN
    15a0:	28 98       	cbi	0x05, 0	; 5
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
    15a2:	80 ea       	ldi	r24, 0xA0	; 160
    15a4:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
    15a8:	88 81       	ld	r24, Y
    15aa:	0e 94 8d 0b 	call	0x171a	; 0x171a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
    15ae:	28 9a       	sbi	0x05, 0	; 5

    
	
	//start transmission
	nrf24l01_CEhi; //high CE
    15b0:	2d 9a       	sbi	0x05, 5	; 5
    15b2:	80 e5       	ldi	r24, 0x50	; 80
    15b4:	8a 95       	dec	r24
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <nrf24l01_write+0x1e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
    15b8:	2d 98       	cbi	0x05, 5	; 5
    15ba:	85 e3       	ldi	r24, 0x35	; 53
    15bc:	8a 95       	dec	r24
    15be:	f1 f7       	brne	.-4      	; 0x15bc <nrf24l01_write+0x26>
    15c0:	00 00       	nop
    
	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
    15c2:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24l01_getstatus>
    15c6:	80 73       	andi	r24, 0x30	; 48
    15c8:	c1 f3       	breq	.-16     	; 0x15ba <nrf24l01_write+0x24>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
    15ca:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24l01_getstatus>
    15ce:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
    15d0:	6c e4       	ldi	r22, 0x4C	; 76
    15d2:	85 e0       	ldi	r24, 0x05	; 5
    15d4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    15de:	68 2f       	mov	r22, r24
    15e0:	6d 7f       	andi	r22, 0xFD	; 253
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
    15e8:	0e 94 82 0a 	call	0x1504	; 0x1504 <nrf24l01_setRX>

	return ret;
}
    15ec:	c5 fb       	bst	r28, 5
    15ee:	88 27       	eor	r24, r24
    15f0:	80 f9       	bld	r24, 0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <nrf24l01_setpalevel>:
/*
 * set power level
 */
void nrf24l01_setpalevel() {	
  	
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP); 
    15f8:	86 e0       	ldi	r24, 0x06	; 6
    15fa:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
    15fe:	68 2f       	mov	r22, r24
    1600:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
    1602:	86 e0       	ldi	r24, 0x06	; 6
    1604:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
    1608:	08 95       	ret

0000160a <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
    160a:	86 e0       	ldi	r24, 0x06	; 6
    160c:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
    1610:	87 7d       	andi	r24, 0xD7	; 215
  if(NRF24L01_RF24_SPEED == NRF24L01_RF24_SPEED_250KBPS) {
    setup |= (1<<NRF24L01_REG_RF_DR_LOW);
  } else {
    if (NRF24L01_RF24_SPEED == NRF24L01_RF24_SPEED_2MBPS) {
    	setup |= (1<<NRF24L01_REG_RF_DR_HIGH);
    1612:	68 2f       	mov	r22, r24
    1614:	68 60       	ori	r22, 0x08	; 8
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
    1616:	86 e0       	ldi	r24, 0x06	; 6
    1618:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
    161c:	08 95       	ret

0000161e <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
    1624:	68 2f       	mov	r22, r24
    1626:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
    162e:	08 95       	ret

00001630 <nrf24l01_init>:
 * init nrf24l01
 */
extern void nrf24l01_init() {
   
	//setup port
	 NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
    1630:	20 9a       	sbi	0x04, 0	; 4
	 NRF24L01_CE_DDR |= (1<<NRF24L01_CE); //output
    1632:	25 9a       	sbi	0x04, 5	; 4

 
    spi_init(); //init spi
    1634:	0e 94 82 0b 	call	0x1704	; 0x1704 <spi_init>
    nrf24l01_CElo; //low CE
    1638:	2d 98       	cbi	0x05, 5	; 5
    nrf24l01_CSNhi; //high CSN
    163a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    163c:	8f e1       	ldi	r24, 0x1F	; 31
    163e:	9e e4       	ldi	r25, 0x4E	; 78
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <nrf24l01_init+0x10>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <nrf24l01_init+0x16>
    1646:	00 00       	nop

    _delay_ms(5); //wait for the radio to init
    
	
    nrf24l01_setpalevel(); //set power level
    1648:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24l01_setpalevel>
	
    nrf24l01_setdatarate(); //set data rate
    164c:	0e 94 05 0b 	call	0x160a	; 0x160a <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
    1650:	0e 94 0f 0b 	call	0x161e	; 0x161e <nrf24l01_setcrclength>
	//nrf24l01_setirq();      // Activate IRQ only in Rx


	
		
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
    1654:	67 e2       	ldi	r22, 0x27	; 39
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	8c e1       	ldi	r24, 0x1C	; 28
    1660:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
    1664:	6c e4       	ldi	r22, 0x4C	; 76
    1666:	85 e0       	ldi	r24, 0x05	; 5
    1668:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>



	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	81 e1       	ldi	r24, 0x11	; 17
    1670:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	#endif
	
	

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1682:	68 2f       	mov	r22, r24
    1684:	61 60       	ori	r22, 0x01	; 1
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
	
	

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    1692:	68 2f       	mov	r22, r24
    1694:	61 60       	ori	r22, 0x01	; 1
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    16a2:	68 2f       	mov	r22, r24
    16a4:	62 60       	ori	r22, 0x02	; 2
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    16b2:	68 2f       	mov	r22, r24
    16b4:	64 60       	ori	r22, 0x04	; 4
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    16c2:	68 2f       	mov	r22, r24
    16c4:	68 60       	ori	r22, 0x08	; 8
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    16d2:	68 2f       	mov	r22, r24
    16d4:	60 61       	ori	r22, 0x10	; 16
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	0e 94 df 09 	call	0x13be	; 0x13be <nrf24l01_readregister>
    16e2:	68 2f       	mov	r22, r24
    16e4:	60 62       	ori	r22, 0x20	; 32
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif
     
	
	 
	 	nrf24l01_setrxaddr(0, nrf24l01_addr0);
    16ec:	61 e2       	ldi	r22, 0x21	; 33
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	0e 94 25 0a 	call	0x144a	; 0x144a <nrf24l01_setrxaddr>
	 	nrf24l01_setrxaddr(5, nrf24l01_addr5);
	 	#endif
	
    
	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);	
    16f6:	8c e1       	ldi	r24, 0x1C	; 28
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	0e 94 4c 0a 	call	0x1498	; 0x1498 <nrf24l01_settxaddr>
     
	 
	//set rx mode
	nrf24l01_setRX();
    16fe:	0e 94 82 0a 	call	0x1504	; 0x1504 <nrf24l01_setRX>
    1702:	08 95       	ret

00001704 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    1704:	84 b1       	in	r24, 0x04	; 4
    1706:	80 7f       	andi	r24, 0xF0	; 240
    1708:	84 b9       	out	0x04, r24	; 4
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    170a:	84 b1       	in	r24, 0x04	; 4
    170c:	87 60       	ori	r24, 0x07	; 7
    170e:	84 b9       	out	0x04, r24	; 4

    SPCR = ((1<<SPE)|               // SPI Enable
    1710:	81 e5       	ldi	r24, 0x51	; 81
    1712:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate fosc/16  500kHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit fosc/8  1MHz
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	8d bd       	out	0x2d, r24	; 45
    1718:	08 95       	ret

0000171a <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    171a:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF)) == 0);
    171c:	0d b4       	in	r0, 0x2d	; 45
    171e:	07 fe       	sbrs	r0, 7
    1720:	fd cf       	rjmp	.-6      	; 0x171c <spi_writereadbyte+0x2>
    return SPDR;
    1722:	8e b5       	in	r24, 0x2e	; 46
}
    1724:	08 95       	ret

00001726 <__tablejump2__>:
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31

0000172a <__tablejump__>:
    172a:	05 90       	lpm	r0, Z+
    172c:	f4 91       	lpm	r31, Z
    172e:	e0 2d       	mov	r30, r0
    1730:	09 94       	ijmp

00001732 <__eerd_byte_usb162>:
    1732:	f9 99       	sbic	0x1f, 1	; 31
    1734:	fe cf       	rjmp	.-4      	; 0x1732 <__eerd_byte_usb162>
    1736:	92 bd       	out	0x22, r25	; 34
    1738:	81 bd       	out	0x21, r24	; 33
    173a:	f8 9a       	sbi	0x1f, 0	; 31
    173c:	99 27       	eor	r25, r25
    173e:	80 b5       	in	r24, 0x20	; 32
    1740:	08 95       	ret

00001742 <_exit>:
    1742:	f8 94       	cli

00001744 <__stop_program>:
    1744:	ff cf       	rjmp	.-2      	; 0x1744 <__stop_program>
